{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-orange/source/css/about.styl","path":"css/about.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-orange/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-orange/source/css/layout.styl","path":"css/layout.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-orange/source/css/life.styl","path":"css/life.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-orange/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-orange/source/css/tags.styl","path":"css/tags.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-orange/source/js/index.js","path":"js/index.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-orange/source/js/theme.js","path":"js/theme.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-orange/source/img/back-top.png","path":"img/back-top.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-orange/source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":1},{"_id":"themes/hexo-theme-orange/source/img/search-gt.png","path":"img/search-gt.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-orange/source/img/search-lt.png","path":"img/search-lt.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-orange/source/js/jquery/jquery-3.1.1.min.js","path":"js/jquery/jquery-3.1.1.min.js","modified":0,"renderable":1},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"5999fa13775a71ecaaafb5ebe3d6e99608779e5c","modified":1615702262319},{"_id":"source/about.md","hash":"c7bfce380d9ddbc106418162be1777c18c35261a","modified":1615702262320},{"_id":"themes/hexo-theme-orange/LICENSE","hash":"218b4bf797149a2751a015812a9adefe368185c1","modified":1615702262322},{"_id":"themes/hexo-theme-orange/_config.yml","hash":"94620f62ada1b9d97b53ab2e7cb66b00fd961109","modified":1616974591624},{"_id":"themes/hexo-theme-orange/.gitignore","hash":"5a4a925cfd624633dafaacaced416c8d7272dcef","modified":1615702262382},{"_id":"themes/hexo-theme-orange/readme.md","hash":"9da3f0d23ce74fef449190a90de139848ef51ced","modified":1615702262381},{"_id":"themes/hexo-theme-orange/languages/en.yml","hash":"f3dd50ca369974ac7d335fb1cfabf4ebb04a64fa","modified":1615702262379},{"_id":"themes/hexo-theme-orange/languages/zh.yml","hash":"9ffaff1f5d240c94e44f9ef3b02bbae146af0dd4","modified":1615702262380},{"_id":"themes/hexo-theme-orange/layout/404.ejs","hash":"8a30233a7b99831bd771121b5f450aaba412e8d5","modified":1615702262323},{"_id":"themes/hexo-theme-orange/layout/category.ejs","hash":"6611b6de460fb90269ad10448deccd7cc788b72c","modified":1615702262324},{"_id":"themes/hexo-theme-orange/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1615702262326},{"_id":"themes/hexo-theme-orange/layout/about.ejs","hash":"08ab9b629077b9f1e6e6669f962c9551305bb484","modified":1615702262329},{"_id":"themes/hexo-theme-orange/layout/layout.ejs","hash":"f53ef8a2bf73809fd27b3ae5e44818c5bc911bf4","modified":1615702262328},{"_id":"themes/hexo-theme-orange/layout/life.ejs","hash":"adfe634dd96e20e06eecb64dad7de56e89dbf2e0","modified":1615702262327},{"_id":"themes/hexo-theme-orange/layout/index.ejs","hash":"7ee373753ea4edb91f0a7d18397bca0191695d63","modified":1615702262326},{"_id":"themes/hexo-theme-orange/layout/post.ejs","hash":"fea92a009a8f49d027cb7926ed85ab3c12b6bab3","modified":1615702262325},{"_id":"themes/hexo-theme-orange/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1615702262346},{"_id":"themes/hexo-theme-orange/layout/tags.ejs","hash":"0732737f988e3a76e8472e3a6ce8bad91ef08e98","modified":1615702262328},{"_id":"themes/hexo-theme-orange/layout/_partial/after-footer.ejs","hash":"5774ec306bcf6d2163200630f303e6e01e9a909f","modified":1678334534791},{"_id":"themes/hexo-theme-orange/layout/_partial/archive-post.ejs","hash":"e11b1094f0882c6f1f28375260eda47d1293e996","modified":1615702262338},{"_id":"themes/hexo-theme-orange/layout/_partial/archive.ejs","hash":"fa16d9a99e535c0cce620628e4050c6b86ba776c","modified":1615702262339},{"_id":"themes/hexo-theme-orange/layout/_partial/footer.ejs","hash":"99506ad599f5ab9ee43797d78dce1ad178256e85","modified":1616973717158},{"_id":"themes/hexo-theme-orange/layout/_partial/article.ejs","hash":"56d85de98361694d47f08f346c5c6307e519b609","modified":1678418119660},{"_id":"themes/hexo-theme-orange/layout/_partial/head-bar.ejs","hash":"e6eca70cdd7e2ba879671d04031ebc0e94b22330","modified":1615702262340},{"_id":"themes/hexo-theme-orange/layout/_partial/head.ejs","hash":"3e627cfc9dce86ff2d32151ef33ac1e88cb98218","modified":1615702262342},{"_id":"themes/hexo-theme-orange/layout/_partial/header.ejs","hash":"2bdcd9062234bf3b46416276868a5fbecc14f1d2","modified":1615702262341},{"_id":"themes/hexo-theme-orange/layout/_partial/menu.ejs","hash":"4189f8b817bea54e8db9bc0bc04503c1d17b8633","modified":1615702262341},{"_id":"themes/hexo-theme-orange/layout/_partial/tags.ejs","hash":"dc229f27a2b3e166ba1792410c914ed7a3e54e96","modified":1615702262345},{"_id":"themes/hexo-theme-orange/layout/_widget/Archives.ejs","hash":"174797df2f69756a34b0ee513156255340c4d9bf","modified":1615702262348},{"_id":"themes/hexo-theme-orange/layout/_widget/Tags.ejs","hash":"84cdf991b16be492e55fa6142625f79e8561b9c0","modified":1615702262349},{"_id":"themes/hexo-theme-orange/layout/_widget/Lifes.ejs","hash":"472b9dc7ff0bac3da4653f1a3cae745eee3c7a1d","modified":1615702262350},{"_id":"themes/hexo-theme-orange/source/css/about.styl","hash":"32aa661eddcaa904644adab26cd4bc054d2cc0d7","modified":1615702262355},{"_id":"themes/hexo-theme-orange/source/css/_variables.styl","hash":"7bffbf30dc2a51a12b30bff663ba1e51680e8965","modified":1615702262353},{"_id":"themes/hexo-theme-orange/source/css/index.styl","hash":"2d4a27452ee957ed471ce215d3e8a3e4aabd98b3","modified":1615702262354},{"_id":"themes/hexo-theme-orange/source/css/layout.styl","hash":"4cde016e030d214d7d2ca35728d0843b38d0e282","modified":1616974918354},{"_id":"themes/hexo-theme-orange/source/css/style.styl","hash":"f6fc3eb10b39a6de739eed17321ac9d26413be42","modified":1616974953305},{"_id":"themes/hexo-theme-orange/source/css/tags.styl","hash":"e6b71c35af03dc8ab61ec4d9dc9240676d2ffc18","modified":1615702262352},{"_id":"themes/hexo-theme-orange/source/js/index.js","hash":"850c755daeee8ec252e303a0b1435e1d2c172e51","modified":1615702262373},{"_id":"themes/hexo-theme-orange/source/css/life.styl","hash":"4db03f52df80bd03808104be604978832bd23ea4","modified":1615702262356},{"_id":"themes/hexo-theme-orange/source/js/theme.js","hash":"0e2a11067e6e3c80f731f3922b667cd1c2a6ed0d","modified":1615702262374},{"_id":"themes/hexo-theme-orange/source/img/back-top.png","hash":"17ee62ccac2240bbc5f4d7d351b165835e93e592","modified":1615702262378},{"_id":"themes/hexo-theme-orange/source/img/search-gt.png","hash":"162b12bb3a1a8f31838ce0f7e6ac5ffe593892ca","modified":1615702262377},{"_id":"themes/hexo-theme-orange/source/img/search-lt.png","hash":"df5777e230ed06879f228d1e1f1fbec8f4682ead","modified":1615702262377},{"_id":"themes/hexo-theme-orange/layout/_partial/post/archive-title.ejs","hash":"8ce27479b818e71fabc91ac3b0d92baca5c958a1","modified":1615702262337},{"_id":"themes/hexo-theme-orange/layout/_partial/post/category.ejs","hash":"16128d2422645e18d1b6882d4c4df17d895bd76e","modified":1615702262331},{"_id":"themes/hexo-theme-orange/layout/_partial/post/date.ejs","hash":"e817b6cbe053054e4ddafede76092fd45c30cda9","modified":1615702262335},{"_id":"themes/hexo-theme-orange/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1615702262334},{"_id":"themes/hexo-theme-orange/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1615702262335},{"_id":"themes/hexo-theme-orange/layout/_partial/post/nav.ejs","hash":"cbb3819ce512bd24db8bad41b8617d46eba82fdc","modified":1615702262333},{"_id":"themes/hexo-theme-orange/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1615702262332},{"_id":"themes/hexo-theme-orange/layout/_partial/post/toc.ejs","hash":"d146530e081ec2fc0593a6bb250bd6569427a072","modified":1615702262336},{"_id":"themes/hexo-theme-orange/source/css/_partial/archive.styl","hash":"0a4fee0fdf7923fbc72d41177820317bde7e47fc","modified":1615702262364},{"_id":"themes/hexo-theme-orange/source/css/_partial/head-bar.styl","hash":"848aaaaa2d60af908006132525bc649a2a588bcf","modified":1615702262365},{"_id":"themes/hexo-theme-orange/source/css/_partial/article.styl","hash":"9a7f16e1e6884015f9042c98c0717eb1b2fbd2db","modified":1678332604015},{"_id":"themes/hexo-theme-orange/source/css/_partial/footer.styl","hash":"a155d7436f2c2d76d6a62f142f81453fa78fd2d9","modified":1615702262362},{"_id":"themes/hexo-theme-orange/source/css/_partial/header.styl","hash":"2972e7893cc21e5df950611783d2d21d68c13352","modified":1615702262363},{"_id":"themes/hexo-theme-orange/source/css/_partial/highlight.styl","hash":"6b40b17d861b078db41ba1abf45c211af6ddda5c","modified":1615702262361},{"_id":"themes/hexo-theme-orange/source/css/_partial/menu.styl","hash":"04e7c9d98942f5b1c603c9934f50c377bbccc757","modified":1615702262359},{"_id":"themes/hexo-theme-orange/source/css/_widget/Archives.styl","hash":"96f17f08ca8c0eebe4e28163e8d3661571496ee8","modified":1615702262370},{"_id":"themes/hexo-theme-orange/source/css/_widget/Tags.styl","hash":"f50002e25daab7889d18d8f4f14cce72d866b708","modified":1615702262368},{"_id":"themes/hexo-theme-orange/source/css/_widget/lifes.styl","hash":"4c2a833e604dc469f816fa33424b285a2d146bad","modified":1615702262369},{"_id":"themes/hexo-theme-orange/source/css/_partial/post/toc.styl","hash":"17e552d43282c5e1d28c148a462e5c99da363b88","modified":1615702262360},{"_id":"themes/hexo-theme-orange/source/js/jquery/jquery-3.1.1.min.js","hash":"f647a6d37dc4ca055ced3cf64bbc1f490070acba","modified":1615702262372},{"_id":"themes/hexo-theme-orange/source/img/favicon.ico","hash":"f77216a22103448a098c4aa930e90d2f075559c1","modified":1616973965132},{"_id":"public/2021/03/hello-world/index.html","hash":"98590dfbabe6e7969ac713fdab2575cb252bda0b","modified":1678417870418},{"_id":"public/archives/index.html","hash":"4e2f96a22c6c9c8cd55b4828c7ca73386ac098f5","modified":1678334556781},{"_id":"public/archives/2021/index.html","hash":"482043f71c6c4d049de3b744b9627fb005c62db3","modified":1678334556781},{"_id":"public/archives/2021/03/index.html","hash":"482043f71c6c4d049de3b744b9627fb005c62db3","modified":1678334556781},{"_id":"public/index.html","hash":"d50e9807cce08fe152fbdf0f22177f92eb3c941f","modified":1678417870418},{"_id":"public/img/back-top.png","hash":"17ee62ccac2240bbc5f4d7d351b165835e93e592","modified":1615702514577},{"_id":"public/img/search-gt.png","hash":"162b12bb3a1a8f31838ce0f7e6ac5ffe593892ca","modified":1615702514577},{"_id":"public/img/search-lt.png","hash":"df5777e230ed06879f228d1e1f1fbec8f4682ead","modified":1615702514577},{"_id":"public/css/about.css","hash":"eda03070107e2ccf86da50ff165db5acb20bbf10","modified":1615702514577},{"_id":"public/css/index.css","hash":"e19838fd64df8087c73d896962c3e0bd0e784e73","modified":1615702514577},{"_id":"public/css/layout.css","hash":"46cd2ca62558b2fdb5effce41c79a9400d029ed3","modified":1615702514577},{"_id":"public/css/life.css","hash":"d7d12bcd8f4d25a3d92bef04f047d0ec9c4804cf","modified":1615702514577},{"_id":"public/css/style.css","hash":"7f6e4907003ce880013dc1916a92023e27c47e0f","modified":1616974983820},{"_id":"public/css/tags.css","hash":"49a7dc170bf82382ca45ce98fdfa81dfab764077","modified":1615702514577},{"_id":"public/js/theme.js","hash":"0e2a11067e6e3c80f731f3922b667cd1c2a6ed0d","modified":1615702514577},{"_id":"public/js/index.js","hash":"c1f35d99a703c1e8fd1c235f2c62c98e18b169fa","modified":1615702514577},{"_id":"public/js/jquery/jquery-3.1.1.min.js","hash":"f647a6d37dc4ca055ced3cf64bbc1f490070acba","modified":1615702514577},{"_id":"public/img/favicon.ico","hash":"f77216a22103448a098c4aa930e90d2f075559c1","modified":1616974752851},{"_id":"source/CNAME","hash":"350b2c6bf59802836f68e0f68d9c834f9650d9a6","modified":1615703596641},{"_id":"public/CNAME","hash":"350b2c6bf59802836f68e0f68d9c834f9650d9a6","modified":1615703990772},{"_id":"source/about/index.md","hash":"af9a09e34f0f23c8c64c35a0e8bae898ed00b8dd","modified":1678332494473},{"_id":"public/about/index.html","hash":"5c75b8cf1d20dbfdab3ce912634c6aaaf0db94ad","modified":1678418113329},{"_id":"source/_posts/katas.md","hash":"d92eb7c97313f19ab8723316a9203978b057ee80","modified":1616974168639},{"_id":"public/2021/03/katas/index.html","hash":"1851904da35ad00bf6d3cb39ce27f5fc239b962f","modified":1678417870418},{"_id":"public/tags/blender-cad-learning/index.html","hash":"e98f700de437d37cf9f65c2d44cbe1965c77da2d","modified":1616972858932},{"_id":"themes/hexo-theme-orange/source/css/_partial/article.styl 17-11-16-384.styl","hash":"e43584ce5ea18f10c2f4a6250361598e35fdc6c0","modified":1616972697154},{"_id":"public/tags/blender/index.html","hash":"fbcc545e9fb61a65e79a668921673c03f4e2d8fc","modified":1678334556781},{"_id":"public/tags/cad/index.html","hash":"fbcc545e9fb61a65e79a668921673c03f4e2d8fc","modified":1678334556781},{"_id":"public/tags/learning/index.html","hash":"fbcc545e9fb61a65e79a668921673c03f4e2d8fc","modified":1678334556781},{"_id":"source/_posts/rust-hierarchical-configuration.md","hash":"ff43fbe935d072ad16fb94895b374d1636aa83b0","modified":1678344311878},{"_id":"public/archives/2023/index.html","hash":"bec70464099a09788f8290b46c006229748a6967","modified":1678334556781},{"_id":"public/archives/2023/03/index.html","hash":"bec70464099a09788f8290b46c006229748a6967","modified":1678334556781},{"_id":"public/tags/rust/index.html","hash":"bec70464099a09788f8290b46c006229748a6967","modified":1678334556781},{"_id":"public/tags/figment/index.html","hash":"bec70464099a09788f8290b46c006229748a6967","modified":1678334556781},{"_id":"public/tags/clap/index.html","hash":"bec70464099a09788f8290b46c006229748a6967","modified":1678334556781},{"_id":"public/tags/configuration/index.html","hash":"bec70464099a09788f8290b46c006229748a6967","modified":1678334556781},{"_id":"public/2023/03/rust-hierarchical-configuration/index.html","hash":"02952867e96b6a50c3efea4bf6f36fa1d48f58b9","modified":1678417870418},{"_id":"public/tags/cli/index.html","hash":"bec70464099a09788f8290b46c006229748a6967","modified":1678334556781}],"Category":[],"Data":[],"Page":[{"_content":"howdy my friends.\n\nmy name is jesse and i like to make stuff.\n\nsome of my other sites:\n\n* [https://github.com/steezeburger](https://github.com/steezeburger)\n* [https://siqnastee.com](https://siqnastee.com)\n* [https://mileyvirus.xyz/](https://mileyvirus.xyz/)\n* [https://www.instagram.com/steezeburger/](https://www.instagram.com/steezeburger/)\n* [https://www.instagram.com/a_cgi_steezeburger/](https://www.instagram.com/a_cgi_steezeburger/)\n","source":"about/index.md","raw":"howdy my friends.\n\nmy name is jesse and i like to make stuff.\n\nsome of my other sites:\n\n* [https://github.com/steezeburger](https://github.com/steezeburger)\n* [https://siqnastee.com](https://siqnastee.com)\n* [https://mileyvirus.xyz/](https://mileyvirus.xyz/)\n* [https://www.instagram.com/steezeburger/](https://www.instagram.com/steezeburger/)\n* [https://www.instagram.com/a_cgi_steezeburger/](https://www.instagram.com/a_cgi_steezeburger/)\n","date":"2023-03-09T03:28:14.473Z","updated":"2023-03-09T03:28:14.473Z","path":"about/index.html","_id":"ckm8stava0000gvo4f9zc5c9d","title":"","comments":1,"layout":"page","content":"<p>howdy my friends.</p>\n<p>my name is jesse and i like to make stuff.</p>\n<p>some of my other sites:</p>\n<ul>\n<li><a href=\"https://github.com/steezeburger\">https://github.com/steezeburger</a></li>\n<li><a href=\"https://siqnastee.com/\">https://siqnastee.com</a></li>\n<li><a href=\"https://mileyvirus.xyz/\">https://mileyvirus.xyz/</a></li>\n<li><a href=\"https://www.instagram.com/steezeburger/\">https://www.instagram.com/steezeburger/</a></li>\n<li><a href=\"https://www.instagram.com/a_cgi_steezeburger/\">https://www.instagram.com/a_cgi_steezeburger/</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>howdy my friends.</p>\n<p>my name is jesse and i like to make stuff.</p>\n<p>some of my other sites:</p>\n<ul>\n<li><a href=\"https://github.com/steezeburger\">https://github.com/steezeburger</a></li>\n<li><a href=\"https://siqnastee.com/\">https://siqnastee.com</a></li>\n<li><a href=\"https://mileyvirus.xyz/\">https://mileyvirus.xyz/</a></li>\n<li><a href=\"https://www.instagram.com/steezeburger/\">https://www.instagram.com/steezeburger/</a></li>\n<li><a href=\"https://www.instagram.com/a_cgi_steezeburger/\">https://www.instagram.com/a_cgi_steezeburger/</a></li>\n</ul>\n"}],"Post":[{"_content":"well hello there. welcome to my blog.","source":"_posts/hello-world.md","raw":"well hello there. welcome to my blog.","slug":"hello-world","published":1,"date":"2021-03-14T06:11:02.319Z","updated":"2021-03-14T06:11:02.319Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ckm8rk77p0000iuo4083n6dir","content":"<p>well hello there. welcome to my blog.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>well hello there. welcome to my blog.</p>\n"},{"title":"katas","date":"2021-03-28T11:05:00.000Z","_content":"\nA kata is something borrowed from Japanese martial arts and is something I have seen a lot as a suggestion when learning software development.\n\n\nKata is a Japanese word that means \"form\". The idea is to practice the same movements often enough that they become second nature. In software development, a developer may use katas to practice things like creating a new router in an app, or maybe writing an algorithm to find all primes up to a specified number. Just short practice items. This practice can lead to more time and mental capacity to think about more important problems that you are trying to solve in your work. It helps keep you sharp and is a fun way to learn new languages and practice algorithms at the same time as well.\n\nI've been learning Blender recently, and I didn't really see any short practice lists or challenges to complete when learning digital modeling and CAD.\n\nSo, if you find this page and are also learning a new modeling program, I challenge you to model the following items:\n\n* ink pen\n* mug\n* usb flash drive\n* three legged stool\n","source":"_posts/katas.md","raw":"---\ntitle: katas\ndate: 2021-03-28 05:05:00\ntags:\n    - blender\n    - cad\n    - learning\n---\n\nA kata is something borrowed from Japanese martial arts and is something I have seen a lot as a suggestion when learning software development.\n\n\nKata is a Japanese word that means \"form\". The idea is to practice the same movements often enough that they become second nature. In software development, a developer may use katas to practice things like creating a new router in an app, or maybe writing an algorithm to find all primes up to a specified number. Just short practice items. This practice can lead to more time and mental capacity to think about more important problems that you are trying to solve in your work. It helps keep you sharp and is a fun way to learn new languages and practice algorithms at the same time as well.\n\nI've been learning Blender recently, and I didn't really see any short practice lists or challenges to complete when learning digital modeling and CAD.\n\nSo, if you find this page and are also learning a new modeling program, I challenge you to model the following items:\n\n* ink pen\n* mug\n* usb flash drive\n* three legged stool\n","slug":"katas","published":1,"updated":"2021-03-28T23:29:28.639Z","_id":"ckmf0q5fj00009zo4ap40aw7x","comments":1,"layout":"post","photos":[],"link":"","content":"<p>A kata is something borrowed from Japanese martial arts and is something I have seen a lot as a suggestion when learning software development.</p>\n<p>Kata is a Japanese word that means “form”. The idea is to practice the same movements often enough that they become second nature. In software development, a developer may use katas to practice things like creating a new router in an app, or maybe writing an algorithm to find all primes up to a specified number. Just short practice items. This practice can lead to more time and mental capacity to think about more important problems that you are trying to solve in your work. It helps keep you sharp and is a fun way to learn new languages and practice algorithms at the same time as well.</p>\n<p>I’ve been learning Blender recently, and I didn’t really see any short practice lists or challenges to complete when learning digital modeling and CAD.</p>\n<p>So, if you find this page and are also learning a new modeling program, I challenge you to model the following items:</p>\n<ul>\n<li>ink pen</li>\n<li>mug</li>\n<li>usb flash drive</li>\n<li>three legged stool</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>A kata is something borrowed from Japanese martial arts and is something I have seen a lot as a suggestion when learning software development.</p>\n<p>Kata is a Japanese word that means “form”. The idea is to practice the same movements often enough that they become second nature. In software development, a developer may use katas to practice things like creating a new router in an app, or maybe writing an algorithm to find all primes up to a specified number. Just short practice items. This practice can lead to more time and mental capacity to think about more important problems that you are trying to solve in your work. It helps keep you sharp and is a fun way to learn new languages and practice algorithms at the same time as well.</p>\n<p>I’ve been learning Blender recently, and I didn’t really see any short practice lists or challenges to complete when learning digital modeling and CAD.</p>\n<p>So, if you find this page and are also learning a new modeling program, I challenge you to model the following items:</p>\n<ul>\n<li>ink pen</li>\n<li>mug</li>\n<li>usb flash drive</li>\n<li>three legged stool</li>\n</ul>\n"},{"title":"Rust Hierarchical Configurations from Files, Environment Variables, and CLI Args with Figment and Clap.","date":"2023-03-09T02:24:48.000Z","_content":"\n## Why?\n\nI've been working with Rust lately and I recently needed to implement a program where the configuration could be set through a file, environment variables, and cli args, with the latter overriding the former.\n\nThis is called a hierarchical configuration, and it is the recommended way of handling configuration in your applications.\n\nThere are several benefits to using hierarchical configuration. A few of them are:\n\n* **Easier testing** - you can easily test your app with different configurations and in different environments. e.g. cli w/ cli args, ide w/ file, cloud environments w/ environment variables, etc.\n\n* **Improved portability** - you can easily override single configuration values for deployment to any environment. [12 Factor App](https://12factor.net/) recommends setting configuration values with environment variables. This is no problem with the setup I recommend.\n\n* **Flexibility** - you can provide different levels of configuration customization for different users for different use cases, e.g. you can provide default configuration for most users but let power users override these values with environment variables or command line arguments.\n\n\nFigment has some suggestions for how to use it with Clap, but their example did not fit my use case, and I had trouble finding examples of how to implement this properly. That is why I decided to write this blog post!\n\n\n## How?\n\nThere are a few Rust crates that support hierarchical configurations. I chose [Figment](https://crates.io/crates/figment) because it was the only layered config crate that could handle values directly from the Serialize type. This was necessary to support command line arguments. We also need [Clap](https://crates.io/crates/clap) for command line argument parsing and [Serde](https://crates.io/crates/serde) for serialization of these command line arguments so that the argument values will be deserialized into the correct Rust types.\n\nFigment actually has a nice little section in the [documentation](https://docs.rs/figment/0.10.8/figment/#for-cli-application-authors) that explains how to use Figment with Clap, but there are a few differences with how they set up their configurations. They chose to load the configurations in a different order than is recommended for hierarchical configurations.\n\n```rust\nuse clap::Parser;\nuse figment::{Figment, providers::{Serialized, Toml, Env, Format}};\nuse serde::{Serialize, Deserialize};\n\n#[derive(Parser, Debug)]\nstruct Config {\n   /// Name of the person to greet.\n   #[clap(short, long, value_parser)]\n   name: String,\n\n   /// Number of times to greet\n   #[clap(short, long, value_parser, default_value_t = 1)]\n   count: u8,\n}\n\n// Parse CLI arguments. Override CLI config values with those in\n// `Config.toml` and `APP_`-prefixed environment variables.\nlet config: Config = Figment::new()\n    .merge(Serialized::defaults(Config::parse()))\n    .merge(Toml::file(\"Config.toml\"))\n    .merge(Env::prefixed(\"APP_\"))\n    .extract()?;\n```\n\nTheir ordering is `cli args < file < environment variables`, but we want `file < environment variables < cli args`. We could simply reorder the `merge` calls. Let's try that.\n\n```rust\n// Parse CLI arguments. Override CLI config values with those in\n// `Config.toml` and `APP_`-prefixed environment variables.\nlet config: Config = Figment::new()\n    .merge(Toml::file(\"Config.toml\"))\n    .merge(Env::prefixed(\"APP_\"))\n    .merge(Serialized::defaults(Config::parse()))\n    .extract()?;\n```\n\nHowever, this causes an issue. This will force you to use command line arguments, because if you don't, the values would be `None`, but your `Config` struct's values are not `Option<T>`, so they can't be `None`. Your code will panic! Okay, so what if we refactored `Config` to use `Option<T>`s?\n\n```rust\n#[derive(Parser, Debug)]\nstruct Config {\n    /// Name of the person to greet.\n    #[clap(short, long, value_parser)]\n    name: Option<String>,\n\n    /// Number of times to greet\n    #[clap(short, long, value_parser, default_value_t = 1)]\n    count: Option<u8>,\n}\n```\n\nWe now run into another issue. If we called the program without command line arguments specified, the `Config`'s values would be `None`. This would override the previous configuration values set by the file or environment variables with `None`! This means we are still basically forced to use command line arguments.\n\n## Final Solution\n\nThe final solution required adding a separate struct to handle the command line arguments, along with a helper from `Serde` that let's use skip serialization of values if they are `None`.\n\n```rust\n// cli.rs\nuse clap::Parser;\nuse serde::Serialize;\n\n#[derive(Debug, Parser, Serialize)]\npub(crate) struct Cli {\n    /// The name \n    #[arg(long = \"name\")]\n    #[serde(skip_serializing_if = \"::std::option::Option::is_none\")]\n    pub(crate) name: Option<String>,\n\n    /// The count\n    #[arg(long = \"count\")]\n    #[serde(skip_serializing_if = \"::std::option::Option::is_none\")]\n    pub(crate) count: Option<u8>,\n}\n```\n\nNotice the `#[serde(skip_serializing_if = \"::std::option::Option::is_none\")]`! This means the value will not be included in the serialized struct if it was not set on the command line.\n\n```rust\n// config.rs\nuse serde::{Deserialize, Serialize};\n\n/// The global configuration for the driver and its components.\n#[derive(Serialize, Deserialize)]\npub(crate) struct Config {\n    /// The name\n    pub(crate) name: String,\n\n    /// The count\n    pub(crate) count: u8,\n}\n\n```\n\n```rust\nuse clap::Parser;\nuse color_eyre::eyre::Result;\nuse figment::{\n    Figment,\n    providers::{Env, Format, Serialized, Toml},\n};\n\n// main.rs\nuse crate::cli::Cli;\nuse crate::config::Config;\n\npub(crate) mod cli;\npub(crate) mod config;\n\npub async fn run() -> Result<()> {\n    // hierarchical config. cli args override envars which override toml config values\n    let conf: Config = Figment::new()\n        .merge(Toml::file(\"Config.toml\"))\n        .merge(Env::prefixed(\"APP_\"))\n        .merge(Serialized::defaults(Cli::parse()))\n        .extract()?;\n```\n\nNow we can elegantly set configuration values with Toml files, environment variables, and command line arguments in a sane way!\n\nYou can see a full example in action in this repo I am currently working on at my new company, [Astria](https://astria.org/).\n\nhttps://github.com/astriaorg/astria-conductor\n\nFeel free to follow me on [Github](https://github.com/steezeburger) or shoot me an e-mail! My e-mail address can be found on my Github profile.\n","source":"_posts/rust-hierarchical-configuration.md","raw":"---\ntitle: Rust Hierarchical Configurations from Files, Environment Variables, and CLI Args with Figment and Clap.\ndate: 2023-03-08 19:24:48\ntags:\n- rust\n- figment\n- clap\n- configuration\n- cli\n---\n\n## Why?\n\nI've been working with Rust lately and I recently needed to implement a program where the configuration could be set through a file, environment variables, and cli args, with the latter overriding the former.\n\nThis is called a hierarchical configuration, and it is the recommended way of handling configuration in your applications.\n\nThere are several benefits to using hierarchical configuration. A few of them are:\n\n* **Easier testing** - you can easily test your app with different configurations and in different environments. e.g. cli w/ cli args, ide w/ file, cloud environments w/ environment variables, etc.\n\n* **Improved portability** - you can easily override single configuration values for deployment to any environment. [12 Factor App](https://12factor.net/) recommends setting configuration values with environment variables. This is no problem with the setup I recommend.\n\n* **Flexibility** - you can provide different levels of configuration customization for different users for different use cases, e.g. you can provide default configuration for most users but let power users override these values with environment variables or command line arguments.\n\n\nFigment has some suggestions for how to use it with Clap, but their example did not fit my use case, and I had trouble finding examples of how to implement this properly. That is why I decided to write this blog post!\n\n\n## How?\n\nThere are a few Rust crates that support hierarchical configurations. I chose [Figment](https://crates.io/crates/figment) because it was the only layered config crate that could handle values directly from the Serialize type. This was necessary to support command line arguments. We also need [Clap](https://crates.io/crates/clap) for command line argument parsing and [Serde](https://crates.io/crates/serde) for serialization of these command line arguments so that the argument values will be deserialized into the correct Rust types.\n\nFigment actually has a nice little section in the [documentation](https://docs.rs/figment/0.10.8/figment/#for-cli-application-authors) that explains how to use Figment with Clap, but there are a few differences with how they set up their configurations. They chose to load the configurations in a different order than is recommended for hierarchical configurations.\n\n```rust\nuse clap::Parser;\nuse figment::{Figment, providers::{Serialized, Toml, Env, Format}};\nuse serde::{Serialize, Deserialize};\n\n#[derive(Parser, Debug)]\nstruct Config {\n   /// Name of the person to greet.\n   #[clap(short, long, value_parser)]\n   name: String,\n\n   /// Number of times to greet\n   #[clap(short, long, value_parser, default_value_t = 1)]\n   count: u8,\n}\n\n// Parse CLI arguments. Override CLI config values with those in\n// `Config.toml` and `APP_`-prefixed environment variables.\nlet config: Config = Figment::new()\n    .merge(Serialized::defaults(Config::parse()))\n    .merge(Toml::file(\"Config.toml\"))\n    .merge(Env::prefixed(\"APP_\"))\n    .extract()?;\n```\n\nTheir ordering is `cli args < file < environment variables`, but we want `file < environment variables < cli args`. We could simply reorder the `merge` calls. Let's try that.\n\n```rust\n// Parse CLI arguments. Override CLI config values with those in\n// `Config.toml` and `APP_`-prefixed environment variables.\nlet config: Config = Figment::new()\n    .merge(Toml::file(\"Config.toml\"))\n    .merge(Env::prefixed(\"APP_\"))\n    .merge(Serialized::defaults(Config::parse()))\n    .extract()?;\n```\n\nHowever, this causes an issue. This will force you to use command line arguments, because if you don't, the values would be `None`, but your `Config` struct's values are not `Option<T>`, so they can't be `None`. Your code will panic! Okay, so what if we refactored `Config` to use `Option<T>`s?\n\n```rust\n#[derive(Parser, Debug)]\nstruct Config {\n    /// Name of the person to greet.\n    #[clap(short, long, value_parser)]\n    name: Option<String>,\n\n    /// Number of times to greet\n    #[clap(short, long, value_parser, default_value_t = 1)]\n    count: Option<u8>,\n}\n```\n\nWe now run into another issue. If we called the program without command line arguments specified, the `Config`'s values would be `None`. This would override the previous configuration values set by the file or environment variables with `None`! This means we are still basically forced to use command line arguments.\n\n## Final Solution\n\nThe final solution required adding a separate struct to handle the command line arguments, along with a helper from `Serde` that let's use skip serialization of values if they are `None`.\n\n```rust\n// cli.rs\nuse clap::Parser;\nuse serde::Serialize;\n\n#[derive(Debug, Parser, Serialize)]\npub(crate) struct Cli {\n    /// The name \n    #[arg(long = \"name\")]\n    #[serde(skip_serializing_if = \"::std::option::Option::is_none\")]\n    pub(crate) name: Option<String>,\n\n    /// The count\n    #[arg(long = \"count\")]\n    #[serde(skip_serializing_if = \"::std::option::Option::is_none\")]\n    pub(crate) count: Option<u8>,\n}\n```\n\nNotice the `#[serde(skip_serializing_if = \"::std::option::Option::is_none\")]`! This means the value will not be included in the serialized struct if it was not set on the command line.\n\n```rust\n// config.rs\nuse serde::{Deserialize, Serialize};\n\n/// The global configuration for the driver and its components.\n#[derive(Serialize, Deserialize)]\npub(crate) struct Config {\n    /// The name\n    pub(crate) name: String,\n\n    /// The count\n    pub(crate) count: u8,\n}\n\n```\n\n```rust\nuse clap::Parser;\nuse color_eyre::eyre::Result;\nuse figment::{\n    Figment,\n    providers::{Env, Format, Serialized, Toml},\n};\n\n// main.rs\nuse crate::cli::Cli;\nuse crate::config::Config;\n\npub(crate) mod cli;\npub(crate) mod config;\n\npub async fn run() -> Result<()> {\n    // hierarchical config. cli args override envars which override toml config values\n    let conf: Config = Figment::new()\n        .merge(Toml::file(\"Config.toml\"))\n        .merge(Env::prefixed(\"APP_\"))\n        .merge(Serialized::defaults(Cli::parse()))\n        .extract()?;\n```\n\nNow we can elegantly set configuration values with Toml files, environment variables, and command line arguments in a sane way!\n\nYou can see a full example in action in this repo I am currently working on at my new company, [Astria](https://astria.org/).\n\nhttps://github.com/astriaorg/astria-conductor\n\nFeel free to follow me on [Github](https://github.com/steezeburger) or shoot me an e-mail! My e-mail address can be found on my Github profile.\n","slug":"rust-hierarchical-configuration","published":1,"updated":"2023-03-09T06:45:11.878Z","_id":"clf0hmj3k0000ogp9drdsbmp2","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Why\"><a href=\"#Why\" class=\"headerlink\" title=\"Why?\"></a>Why?</h2><p>I’ve been working with Rust lately and I recently needed to implement a program where the configuration could be set through a file, environment variables, and cli args, with the latter overriding the former.</p>\n<p>This is called a hierarchical configuration, and it is the recommended way of handling configuration in your applications.</p>\n<p>There are several benefits to using hierarchical configuration. A few of them are:</p>\n<ul>\n<li><p><strong>Easier testing</strong> - you can easily test your app with different configurations and in different environments. e.g. cli w/ cli args, ide w/ file, cloud environments w/ environment variables, etc.</p>\n</li>\n<li><p><strong>Improved portability</strong> - you can easily override single configuration values for deployment to any environment. <a href=\"https://12factor.net/\">12 Factor App</a> recommends setting configuration values with environment variables. This is no problem with the setup I recommend.</p>\n</li>\n<li><p><strong>Flexibility</strong> - you can provide different levels of configuration customization for different users for different use cases, e.g. you can provide default configuration for most users but let power users override these values with environment variables or command line arguments.</p>\n</li>\n</ul>\n<p>Figment has some suggestions for how to use it with Clap, but their example did not fit my use case, and I had trouble finding examples of how to implement this properly. That is why I decided to write this blog post!</p>\n<h2 id=\"How\"><a href=\"#How\" class=\"headerlink\" title=\"How?\"></a>How?</h2><p>There are a few Rust crates that support hierarchical configurations. I chose <a href=\"https://crates.io/crates/figment\">Figment</a> because it was the only layered config crate that could handle values directly from the Serialize type. This was necessary to support command line arguments. We also need <a href=\"https://crates.io/crates/clap\">Clap</a> for command line argument parsing and <a href=\"https://crates.io/crates/serde\">Serde</a> for serialization of these command line arguments so that the argument values will be deserialized into the correct Rust types.</p>\n<p>Figment actually has a nice little section in the <a href=\"https://docs.rs/figment/0.10.8/figment/#for-cli-application-authors\">documentation</a> that explains how to use Figment with Clap, but there are a few differences with how they set up their configurations. They chose to load the configurations in a different order than is recommended for hierarchical configurations.</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> clap::Parser;</span><br><span class=\"line\"><span class=\"keyword\">use</span> figment::&#123;Figment, providers::&#123;Serialized, Toml, Env, Format&#125;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">use</span> serde::&#123;Serialize, Deserialize&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#[derive(Parser, Debug)]</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Config</span></span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">/// Name of the person to greet.</span></span><br><span class=\"line\">   <span class=\"meta\">#[clap(short, long, value_parser)]</span></span><br><span class=\"line\">   name: <span class=\"built_in\">String</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/// Number of times to greet</span></span><br><span class=\"line\">   <span class=\"meta\">#[clap(short, long, value_parser, default_value_t = 1)]</span></span><br><span class=\"line\">   count: <span class=\"built_in\">u8</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Parse CLI arguments. Override CLI config values with those in</span></span><br><span class=\"line\"><span class=\"comment\">// `Config.toml` and `APP_`-prefixed environment variables.</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> config: Config = Figment::new()</span><br><span class=\"line\">    .merge(Serialized::defaults(Config::parse()))</span><br><span class=\"line\">    .merge(Toml::file(<span class=\"string\">&quot;Config.toml&quot;</span>))</span><br><span class=\"line\">    .merge(Env::prefixed(<span class=\"string\">&quot;APP_&quot;</span>))</span><br><span class=\"line\">    .extract()?;</span><br></pre></td></tr></table></figure>\n\n<p>Their ordering is <code>cli args &lt; file &lt; environment variables</code>, but we want <code>file &lt; environment variables &lt; cli args</code>. We could simply reorder the <code>merge</code> calls. Let’s try that.</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Parse CLI arguments. Override CLI config values with those in</span></span><br><span class=\"line\"><span class=\"comment\">// `Config.toml` and `APP_`-prefixed environment variables.</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> config: Config = Figment::new()</span><br><span class=\"line\">    .merge(Toml::file(<span class=\"string\">&quot;Config.toml&quot;</span>))</span><br><span class=\"line\">    .merge(Env::prefixed(<span class=\"string\">&quot;APP_&quot;</span>))</span><br><span class=\"line\">    .merge(Serialized::defaults(Config::parse()))</span><br><span class=\"line\">    .extract()?;</span><br></pre></td></tr></table></figure>\n\n<p>However, this causes an issue. This will force you to use command line arguments, because if you don’t, the values would be <code>None</code>, but your <code>Config</code> struct’s values are not <code>Option&lt;T&gt;</code>, so they can’t be <code>None</code>. Your code will panic! Okay, so what if we refactored <code>Config</code> to use <code>Option&lt;T&gt;</code>s?</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#[derive(Parser, Debug)]</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Config</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/// Name of the person to greet.</span></span><br><span class=\"line\">    <span class=\"meta\">#[clap(short, long, value_parser)]</span></span><br><span class=\"line\">    name: <span class=\"built_in\">Option</span>&lt;<span class=\"built_in\">String</span>&gt;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// Number of times to greet</span></span><br><span class=\"line\">    <span class=\"meta\">#[clap(short, long, value_parser, default_value_t = 1)]</span></span><br><span class=\"line\">    count: <span class=\"built_in\">Option</span>&lt;<span class=\"built_in\">u8</span>&gt;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>We now run into another issue. If we called the program without command line arguments specified, the <code>Config</code>‘s values would be <code>None</code>. This would override the previous configuration values set by the file or environment variables with <code>None</code>! This means we are still basically forced to use command line arguments.</p>\n<h2 id=\"Final-Solution\"><a href=\"#Final-Solution\" class=\"headerlink\" title=\"Final Solution\"></a>Final Solution</h2><p>The final solution required adding a separate struct to handle the command line arguments, along with a helper from <code>Serde</code> that let’s use skip serialization of values if they are <code>None</code>.</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// cli.rs</span></span><br><span class=\"line\"><span class=\"keyword\">use</span> clap::Parser;</span><br><span class=\"line\"><span class=\"keyword\">use</span> serde::Serialize;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#[derive(Debug, Parser, Serialize)]</span></span><br><span class=\"line\"><span class=\"keyword\">pub</span>(<span class=\"keyword\">crate</span>) <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Cli</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/// The name </span></span><br><span class=\"line\">    <span class=\"meta\">#[arg(long = <span class=\"meta-string\">&quot;name&quot;</span>)]</span></span><br><span class=\"line\">    <span class=\"meta\">#[serde(skip_serializing_if = <span class=\"meta-string\">&quot;::std::option::Option::is_none&quot;</span>)]</span></span><br><span class=\"line\">    <span class=\"keyword\">pub</span>(<span class=\"keyword\">crate</span>) name: <span class=\"built_in\">Option</span>&lt;<span class=\"built_in\">String</span>&gt;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// The count</span></span><br><span class=\"line\">    <span class=\"meta\">#[arg(long = <span class=\"meta-string\">&quot;count&quot;</span>)]</span></span><br><span class=\"line\">    <span class=\"meta\">#[serde(skip_serializing_if = <span class=\"meta-string\">&quot;::std::option::Option::is_none&quot;</span>)]</span></span><br><span class=\"line\">    <span class=\"keyword\">pub</span>(<span class=\"keyword\">crate</span>) count: <span class=\"built_in\">Option</span>&lt;<span class=\"built_in\">u8</span>&gt;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Notice the <code>#[serde(skip_serializing_if = &quot;::std::option::Option::is_none&quot;)]</code>! This means the value will not be included in the serialized struct if it was not set on the command line.</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// config.rs</span></span><br><span class=\"line\"><span class=\"keyword\">use</span> serde::&#123;Deserialize, Serialize&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/// The global configuration for the driver and its components.</span></span><br><span class=\"line\"><span class=\"meta\">#[derive(Serialize, Deserialize)]</span></span><br><span class=\"line\"><span class=\"keyword\">pub</span>(<span class=\"keyword\">crate</span>) <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Config</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/// The name</span></span><br><span class=\"line\">    <span class=\"keyword\">pub</span>(<span class=\"keyword\">crate</span>) name: <span class=\"built_in\">String</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// The count</span></span><br><span class=\"line\">    <span class=\"keyword\">pub</span>(<span class=\"keyword\">crate</span>) count: <span class=\"built_in\">u8</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> clap::Parser;</span><br><span class=\"line\"><span class=\"keyword\">use</span> color_eyre::eyre::<span class=\"built_in\">Result</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> figment::&#123;</span><br><span class=\"line\">    Figment,</span><br><span class=\"line\">    providers::&#123;Env, Format, Serialized, Toml&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// main.rs</span></span><br><span class=\"line\"><span class=\"keyword\">use</span> crate::cli::Cli;</span><br><span class=\"line\"><span class=\"keyword\">use</span> crate::config::Config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span>(<span class=\"keyword\">crate</span>) <span class=\"keyword\">mod</span> cli;</span><br><span class=\"line\"><span class=\"keyword\">pub</span>(<span class=\"keyword\">crate</span>) <span class=\"keyword\">mod</span> config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">run</span></span>() -&gt; <span class=\"built_in\">Result</span>&lt;()&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// hierarchical config. cli args override envars which override toml config values</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> conf: Config = Figment::new()</span><br><span class=\"line\">        .merge(Toml::file(<span class=\"string\">&quot;Config.toml&quot;</span>))</span><br><span class=\"line\">        .merge(Env::prefixed(<span class=\"string\">&quot;APP_&quot;</span>))</span><br><span class=\"line\">        .merge(Serialized::defaults(Cli::parse()))</span><br><span class=\"line\">        .extract()?;</span><br></pre></td></tr></table></figure>\n\n<p>Now we can elegantly set configuration values with Toml files, environment variables, and command line arguments in a sane way!</p>\n<p>You can see a full example in action in this repo I am currently working on at my new company, <a href=\"https://astria.org/\">Astria</a>.</p>\n<p><a href=\"https://github.com/astriaorg/astria-conductor\">https://github.com/astriaorg/astria-conductor</a></p>\n<p>Feel free to follow me on <a href=\"https://github.com/steezeburger\">Github</a> or shoot me an e-mail! My e-mail address can be found on my Github profile.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Why\"><a href=\"#Why\" class=\"headerlink\" title=\"Why?\"></a>Why?</h2><p>I’ve been working with Rust lately and I recently needed to implement a program where the configuration could be set through a file, environment variables, and cli args, with the latter overriding the former.</p>\n<p>This is called a hierarchical configuration, and it is the recommended way of handling configuration in your applications.</p>\n<p>There are several benefits to using hierarchical configuration. A few of them are:</p>\n<ul>\n<li><p><strong>Easier testing</strong> - you can easily test your app with different configurations and in different environments. e.g. cli w/ cli args, ide w/ file, cloud environments w/ environment variables, etc.</p>\n</li>\n<li><p><strong>Improved portability</strong> - you can easily override single configuration values for deployment to any environment. <a href=\"https://12factor.net/\">12 Factor App</a> recommends setting configuration values with environment variables. This is no problem with the setup I recommend.</p>\n</li>\n<li><p><strong>Flexibility</strong> - you can provide different levels of configuration customization for different users for different use cases, e.g. you can provide default configuration for most users but let power users override these values with environment variables or command line arguments.</p>\n</li>\n</ul>\n<p>Figment has some suggestions for how to use it with Clap, but their example did not fit my use case, and I had trouble finding examples of how to implement this properly. That is why I decided to write this blog post!</p>\n<h2 id=\"How\"><a href=\"#How\" class=\"headerlink\" title=\"How?\"></a>How?</h2><p>There are a few Rust crates that support hierarchical configurations. I chose <a href=\"https://crates.io/crates/figment\">Figment</a> because it was the only layered config crate that could handle values directly from the Serialize type. This was necessary to support command line arguments. We also need <a href=\"https://crates.io/crates/clap\">Clap</a> for command line argument parsing and <a href=\"https://crates.io/crates/serde\">Serde</a> for serialization of these command line arguments so that the argument values will be deserialized into the correct Rust types.</p>\n<p>Figment actually has a nice little section in the <a href=\"https://docs.rs/figment/0.10.8/figment/#for-cli-application-authors\">documentation</a> that explains how to use Figment with Clap, but there are a few differences with how they set up their configurations. They chose to load the configurations in a different order than is recommended for hierarchical configurations.</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> clap::Parser;</span><br><span class=\"line\"><span class=\"keyword\">use</span> figment::&#123;Figment, providers::&#123;Serialized, Toml, Env, Format&#125;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">use</span> serde::&#123;Serialize, Deserialize&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#[derive(Parser, Debug)]</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Config</span></span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">/// Name of the person to greet.</span></span><br><span class=\"line\">   <span class=\"meta\">#[clap(short, long, value_parser)]</span></span><br><span class=\"line\">   name: <span class=\"built_in\">String</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/// Number of times to greet</span></span><br><span class=\"line\">   <span class=\"meta\">#[clap(short, long, value_parser, default_value_t = 1)]</span></span><br><span class=\"line\">   count: <span class=\"built_in\">u8</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Parse CLI arguments. Override CLI config values with those in</span></span><br><span class=\"line\"><span class=\"comment\">// `Config.toml` and `APP_`-prefixed environment variables.</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> config: Config = Figment::new()</span><br><span class=\"line\">    .merge(Serialized::defaults(Config::parse()))</span><br><span class=\"line\">    .merge(Toml::file(<span class=\"string\">&quot;Config.toml&quot;</span>))</span><br><span class=\"line\">    .merge(Env::prefixed(<span class=\"string\">&quot;APP_&quot;</span>))</span><br><span class=\"line\">    .extract()?;</span><br></pre></td></tr></table></figure>\n\n<p>Their ordering is <code>cli args &lt; file &lt; environment variables</code>, but we want <code>file &lt; environment variables &lt; cli args</code>. We could simply reorder the <code>merge</code> calls. Let’s try that.</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Parse CLI arguments. Override CLI config values with those in</span></span><br><span class=\"line\"><span class=\"comment\">// `Config.toml` and `APP_`-prefixed environment variables.</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> config: Config = Figment::new()</span><br><span class=\"line\">    .merge(Toml::file(<span class=\"string\">&quot;Config.toml&quot;</span>))</span><br><span class=\"line\">    .merge(Env::prefixed(<span class=\"string\">&quot;APP_&quot;</span>))</span><br><span class=\"line\">    .merge(Serialized::defaults(Config::parse()))</span><br><span class=\"line\">    .extract()?;</span><br></pre></td></tr></table></figure>\n\n<p>However, this causes an issue. This will force you to use command line arguments, because if you don’t, the values would be <code>None</code>, but your <code>Config</code> struct’s values are not <code>Option&lt;T&gt;</code>, so they can’t be <code>None</code>. Your code will panic! Okay, so what if we refactored <code>Config</code> to use <code>Option&lt;T&gt;</code>s?</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#[derive(Parser, Debug)]</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Config</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/// Name of the person to greet.</span></span><br><span class=\"line\">    <span class=\"meta\">#[clap(short, long, value_parser)]</span></span><br><span class=\"line\">    name: <span class=\"built_in\">Option</span>&lt;<span class=\"built_in\">String</span>&gt;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// Number of times to greet</span></span><br><span class=\"line\">    <span class=\"meta\">#[clap(short, long, value_parser, default_value_t = 1)]</span></span><br><span class=\"line\">    count: <span class=\"built_in\">Option</span>&lt;<span class=\"built_in\">u8</span>&gt;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>We now run into another issue. If we called the program without command line arguments specified, the <code>Config</code>‘s values would be <code>None</code>. This would override the previous configuration values set by the file or environment variables with <code>None</code>! This means we are still basically forced to use command line arguments.</p>\n<h2 id=\"Final-Solution\"><a href=\"#Final-Solution\" class=\"headerlink\" title=\"Final Solution\"></a>Final Solution</h2><p>The final solution required adding a separate struct to handle the command line arguments, along with a helper from <code>Serde</code> that let’s use skip serialization of values if they are <code>None</code>.</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// cli.rs</span></span><br><span class=\"line\"><span class=\"keyword\">use</span> clap::Parser;</span><br><span class=\"line\"><span class=\"keyword\">use</span> serde::Serialize;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#[derive(Debug, Parser, Serialize)]</span></span><br><span class=\"line\"><span class=\"keyword\">pub</span>(<span class=\"keyword\">crate</span>) <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Cli</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/// The name </span></span><br><span class=\"line\">    <span class=\"meta\">#[arg(long = <span class=\"meta-string\">&quot;name&quot;</span>)]</span></span><br><span class=\"line\">    <span class=\"meta\">#[serde(skip_serializing_if = <span class=\"meta-string\">&quot;::std::option::Option::is_none&quot;</span>)]</span></span><br><span class=\"line\">    <span class=\"keyword\">pub</span>(<span class=\"keyword\">crate</span>) name: <span class=\"built_in\">Option</span>&lt;<span class=\"built_in\">String</span>&gt;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// The count</span></span><br><span class=\"line\">    <span class=\"meta\">#[arg(long = <span class=\"meta-string\">&quot;count&quot;</span>)]</span></span><br><span class=\"line\">    <span class=\"meta\">#[serde(skip_serializing_if = <span class=\"meta-string\">&quot;::std::option::Option::is_none&quot;</span>)]</span></span><br><span class=\"line\">    <span class=\"keyword\">pub</span>(<span class=\"keyword\">crate</span>) count: <span class=\"built_in\">Option</span>&lt;<span class=\"built_in\">u8</span>&gt;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Notice the <code>#[serde(skip_serializing_if = &quot;::std::option::Option::is_none&quot;)]</code>! This means the value will not be included in the serialized struct if it was not set on the command line.</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// config.rs</span></span><br><span class=\"line\"><span class=\"keyword\">use</span> serde::&#123;Deserialize, Serialize&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/// The global configuration for the driver and its components.</span></span><br><span class=\"line\"><span class=\"meta\">#[derive(Serialize, Deserialize)]</span></span><br><span class=\"line\"><span class=\"keyword\">pub</span>(<span class=\"keyword\">crate</span>) <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Config</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/// The name</span></span><br><span class=\"line\">    <span class=\"keyword\">pub</span>(<span class=\"keyword\">crate</span>) name: <span class=\"built_in\">String</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// The count</span></span><br><span class=\"line\">    <span class=\"keyword\">pub</span>(<span class=\"keyword\">crate</span>) count: <span class=\"built_in\">u8</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> clap::Parser;</span><br><span class=\"line\"><span class=\"keyword\">use</span> color_eyre::eyre::<span class=\"built_in\">Result</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> figment::&#123;</span><br><span class=\"line\">    Figment,</span><br><span class=\"line\">    providers::&#123;Env, Format, Serialized, Toml&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// main.rs</span></span><br><span class=\"line\"><span class=\"keyword\">use</span> crate::cli::Cli;</span><br><span class=\"line\"><span class=\"keyword\">use</span> crate::config::Config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span>(<span class=\"keyword\">crate</span>) <span class=\"keyword\">mod</span> cli;</span><br><span class=\"line\"><span class=\"keyword\">pub</span>(<span class=\"keyword\">crate</span>) <span class=\"keyword\">mod</span> config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">run</span></span>() -&gt; <span class=\"built_in\">Result</span>&lt;()&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// hierarchical config. cli args override envars which override toml config values</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> conf: Config = Figment::new()</span><br><span class=\"line\">        .merge(Toml::file(<span class=\"string\">&quot;Config.toml&quot;</span>))</span><br><span class=\"line\">        .merge(Env::prefixed(<span class=\"string\">&quot;APP_&quot;</span>))</span><br><span class=\"line\">        .merge(Serialized::defaults(Cli::parse()))</span><br><span class=\"line\">        .extract()?;</span><br></pre></td></tr></table></figure>\n\n<p>Now we can elegantly set configuration values with Toml files, environment variables, and command line arguments in a sane way!</p>\n<p>You can see a full example in action in this repo I am currently working on at my new company, <a href=\"https://astria.org/\">Astria</a>.</p>\n<p><a href=\"https://github.com/astriaorg/astria-conductor\">https://github.com/astriaorg/astria-conductor</a></p>\n<p>Feel free to follow me on <a href=\"https://github.com/steezeburger\">Github</a> or shoot me an e-mail! My e-mail address can be found on my Github profile.</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ckmf0q5fj00009zo4ap40aw7x","tag_id":"ckmtso9t70000f7o4386haduu","_id":"ckmtso9tc0003f7o41pp334b0"},{"post_id":"ckmf0q5fj00009zo4ap40aw7x","tag_id":"ckmtso9tb0001f7o4dmaq31zr","_id":"ckmtso9tc0004f7o4dz7ye2pp"},{"post_id":"ckmf0q5fj00009zo4ap40aw7x","tag_id":"ckmtso9tb0002f7o4ayur3yav","_id":"ckmtso9tc0005f7o45ct42sb9"},{"post_id":"clf0hmj3k0000ogp9drdsbmp2","tag_id":"clf0hmj3r0001ogp9a3754xvy","_id":"clf0hmj490006ogp93jgx3r8t"},{"post_id":"clf0hmj3k0000ogp9drdsbmp2","tag_id":"clf0hmj3w0002ogp944ea4a7h","_id":"clf0hmj490007ogp98r7g300r"},{"post_id":"clf0hmj3k0000ogp9drdsbmp2","tag_id":"clf0hmj3x0003ogp9hxeu9dek","_id":"clf0hmj4a0008ogp9g5j62b6g"},{"post_id":"clf0hmj3k0000ogp9drdsbmp2","tag_id":"clf0hmj400004ogp9744q8ibc","_id":"clf0hmj4a0009ogp9fhqsa303"},{"post_id":"clf0hmj3k0000ogp9drdsbmp2","tag_id":"clf0hmj430005ogp96i9252qa","_id":"clf0hmj4b000aogp9gvml0c3c"}],"Tag":[{"name":"blender, cad, learning","_id":"ckmtrm94h00006ho483gf4eol"},{"name":"blender","_id":"ckmtso9t70000f7o4386haduu"},{"name":"cad","_id":"ckmtso9tb0001f7o4dmaq31zr"},{"name":"learning","_id":"ckmtso9tb0002f7o4ayur3yav"},{"name":"rust","_id":"clf0hmj3r0001ogp9a3754xvy"},{"name":"figment","_id":"clf0hmj3w0002ogp944ea4a7h"},{"name":"clap","_id":"clf0hmj3x0003ogp9hxeu9dek"},{"name":"configuration","_id":"clf0hmj400004ogp9744q8ibc"},{"name":"cli","_id":"clf0hmj430005ogp96i9252qa"}]}}