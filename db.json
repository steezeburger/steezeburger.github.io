{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/hexo-theme-orange/source/css/about.styl","path":"css/about.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-orange/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-orange/source/css/layout.styl","path":"css/layout.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-orange/source/css/life.styl","path":"css/life.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-orange/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-orange/source/css/tags.styl","path":"css/tags.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-orange/source/img/back-top.png","path":"img/back-top.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-orange/source/img/favicon.ico","path":"img/favicon.ico","modified":1,"renderable":1},{"_id":"themes/hexo-theme-orange/source/img/search-gt.png","path":"img/search-gt.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-orange/source/img/search-lt.png","path":"img/search-lt.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-orange/source/js/index.js","path":"js/index.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-orange/source/js/theme.js","path":"js/theme.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-orange/source/js/jquery/jquery-3.1.1.min.js","path":"js/jquery/jquery-3.1.1.min.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"350b2c6bf59802836f68e0f68d9c834f9650d9a6","modified":1706997611060},{"_id":"source/_posts/hello-world.md","hash":"8d0239ebaca056ea88f9d5d5dcd55e99a596248c","modified":1706997611060},{"_id":"source/_posts/katas.md","hash":"d92eb7c97313f19ab8723316a9203978b057ee80","modified":1706997611060},{"_id":"source/_posts/rathole-tunnel-for-palworld-server.md","hash":"83a8e60f18f7cb48916f066d52d37b61a35f60a8","modified":1707024314747},{"_id":"source/_posts/rust-hierarchical-configuration.md","hash":"45f53f8b71c611da2750935129ca026e85dd9041","modified":1706997611060},{"_id":"source/about/index.md","hash":"af9a09e34f0f23c8c64c35a0e8bae898ed00b8dd","modified":1706997611060},{"_id":"source/tags/index.md","hash":"2e880484295c85865280fdcabd3151622369a74d","modified":1707001566850},{"_id":"themes/hexo-theme-orange/_config.yml","hash":"94620f62ada1b9d97b53ab2e7cb66b00fd961109","modified":1706997611060},{"_id":"themes/hexo-theme-orange/languages/en.yml","hash":"f3dd50ca369974ac7d335fb1cfabf4ebb04a64fa","modified":1706997611060},{"_id":"themes/hexo-theme-orange/languages/zh.yml","hash":"9ffaff1f5d240c94e44f9ef3b02bbae146af0dd4","modified":1706997611060},{"_id":"themes/hexo-theme-orange/layout/404.ejs","hash":"8a30233a7b99831bd771121b5f450aaba412e8d5","modified":1706997611060},{"_id":"themes/hexo-theme-orange/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1706997611060},{"_id":"themes/hexo-theme-orange/layout/about.ejs","hash":"08ab9b629077b9f1e6e6669f962c9551305bb484","modified":1707001591380},{"_id":"themes/hexo-theme-orange/layout/category.ejs","hash":"6611b6de460fb90269ad10448deccd7cc788b72c","modified":1706997611060},{"_id":"themes/hexo-theme-orange/layout/index.ejs","hash":"7ee373753ea4edb91f0a7d18397bca0191695d63","modified":1706997611060},{"_id":"themes/hexo-theme-orange/layout/layout.ejs","hash":"f53ef8a2bf73809fd27b3ae5e44818c5bc911bf4","modified":1706997611060},{"_id":"themes/hexo-theme-orange/layout/post.ejs","hash":"fea92a009a8f49d027cb7926ed85ab3c12b6bab3","modified":1706997611060},{"_id":"themes/hexo-theme-orange/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1706997611060},{"_id":"themes/hexo-theme-orange/layout/tags.ejs","hash":"0732737f988e3a76e8472e3a6ce8bad91ef08e98","modified":1706997611060},{"_id":"themes/hexo-theme-orange/layout/life.ejs","hash":"adfe634dd96e20e06eecb64dad7de56e89dbf2e0","modified":1706997611060},{"_id":"themes/hexo-theme-orange/layout/_partial/after-footer.ejs","hash":"5774ec306bcf6d2163200630f303e6e01e9a909f","modified":1706997611060},{"_id":"themes/hexo-theme-orange/layout/_partial/archive-post.ejs","hash":"e11b1094f0882c6f1f28375260eda47d1293e996","modified":1706997611060},{"_id":"themes/hexo-theme-orange/layout/_partial/archive.ejs","hash":"fa16d9a99e535c0cce620628e4050c6b86ba776c","modified":1706997611060},{"_id":"themes/hexo-theme-orange/layout/_partial/article.ejs","hash":"56d85de98361694d47f08f346c5c6307e519b609","modified":1706997611060},{"_id":"themes/hexo-theme-orange/layout/_partial/footer.ejs","hash":"99506ad599f5ab9ee43797d78dce1ad178256e85","modified":1706997611060},{"_id":"themes/hexo-theme-orange/layout/_partial/head-bar.ejs","hash":"e6eca70cdd7e2ba879671d04031ebc0e94b22330","modified":1706997611060},{"_id":"themes/hexo-theme-orange/layout/_partial/head.ejs","hash":"3e627cfc9dce86ff2d32151ef33ac1e88cb98218","modified":1706997611060},{"_id":"themes/hexo-theme-orange/layout/_partial/header.ejs","hash":"2bdcd9062234bf3b46416276868a5fbecc14f1d2","modified":1706997611060},{"_id":"themes/hexo-theme-orange/layout/_partial/menu.ejs","hash":"4189f8b817bea54e8db9bc0bc04503c1d17b8633","modified":1706997611060},{"_id":"themes/hexo-theme-orange/layout/_partial/tags.ejs","hash":"dc229f27a2b3e166ba1792410c914ed7a3e54e96","modified":1706997611060},{"_id":"themes/hexo-theme-orange/layout/_widget/Archives.ejs","hash":"174797df2f69756a34b0ee513156255340c4d9bf","modified":1706997611060},{"_id":"themes/hexo-theme-orange/layout/_widget/Tags.ejs","hash":"84cdf991b16be492e55fa6142625f79e8561b9c0","modified":1706997611060},{"_id":"themes/hexo-theme-orange/layout/_widget/Lifes.ejs","hash":"472b9dc7ff0bac3da4653f1a3cae745eee3c7a1d","modified":1706997611060},{"_id":"themes/hexo-theme-orange/source/css/_variables.styl","hash":"7bffbf30dc2a51a12b30bff663ba1e51680e8965","modified":1706997611060},{"_id":"themes/hexo-theme-orange/source/css/about.styl","hash":"32aa661eddcaa904644adab26cd4bc054d2cc0d7","modified":1706997611060},{"_id":"themes/hexo-theme-orange/source/css/style.styl","hash":"f6fc3eb10b39a6de739eed17321ac9d26413be42","modified":1706997611060},{"_id":"themes/hexo-theme-orange/source/img/back-top.png","hash":"17ee62ccac2240bbc5f4d7d351b165835e93e592","modified":1706997611060},{"_id":"themes/hexo-theme-orange/source/css/tags.styl","hash":"e6b71c35af03dc8ab61ec4d9dc9240676d2ffc18","modified":1706997611060},{"_id":"themes/hexo-theme-orange/source/img/search-lt.png","hash":"df5777e230ed06879f228d1e1f1fbec8f4682ead","modified":1706997611060},{"_id":"themes/hexo-theme-orange/source/css/index.styl","hash":"2d4a27452ee957ed471ce215d3e8a3e4aabd98b3","modified":1706997611060},{"_id":"themes/hexo-theme-orange/source/css/layout.styl","hash":"4cde016e030d214d7d2ca35728d0843b38d0e282","modified":1706997611060},{"_id":"themes/hexo-theme-orange/source/css/life.styl","hash":"4db03f52df80bd03808104be604978832bd23ea4","modified":1706997611060},{"_id":"themes/hexo-theme-orange/source/js/theme.js","hash":"0e2a11067e6e3c80f731f3922b667cd1c2a6ed0d","modified":1706997611060},{"_id":"themes/hexo-theme-orange/layout/_partial/post/archive-title.ejs","hash":"8ce27479b818e71fabc91ac3b0d92baca5c958a1","modified":1706997611060},{"_id":"themes/hexo-theme-orange/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1706997611060},{"_id":"themes/hexo-theme-orange/layout/_partial/post/date.ejs","hash":"e817b6cbe053054e4ddafede76092fd45c30cda9","modified":1706997611060},{"_id":"themes/hexo-theme-orange/layout/_partial/post/nav.ejs","hash":"cbb3819ce512bd24db8bad41b8617d46eba82fdc","modified":1706997611060},{"_id":"themes/hexo-theme-orange/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1706997611060},{"_id":"themes/hexo-theme-orange/layout/_partial/post/toc.ejs","hash":"d146530e081ec2fc0593a6bb250bd6569427a072","modified":1706997611060},{"_id":"themes/hexo-theme-orange/source/img/search-gt.png","hash":"162b12bb3a1a8f31838ce0f7e6ac5ffe593892ca","modified":1706997611060},{"_id":"themes/hexo-theme-orange/source/js/index.js","hash":"850c755daeee8ec252e303a0b1435e1d2c172e51","modified":1706997611060},{"_id":"themes/hexo-theme-orange/source/css/_partial/archive.styl","hash":"0a4fee0fdf7923fbc72d41177820317bde7e47fc","modified":1706997611060},{"_id":"themes/hexo-theme-orange/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1706997611060},{"_id":"themes/hexo-theme-orange/layout/_partial/post/category.ejs","hash":"16128d2422645e18d1b6882d4c4df17d895bd76e","modified":1706997611060},{"_id":"themes/hexo-theme-orange/source/css/_partial/article.styl","hash":"9a7f16e1e6884015f9042c98c0717eb1b2fbd2db","modified":1706997611060},{"_id":"themes/hexo-theme-orange/source/css/_partial/article.styl 17-11-16-384.styl","hash":"e43584ce5ea18f10c2f4a6250361598e35fdc6c0","modified":1706997611060},{"_id":"themes/hexo-theme-orange/source/css/_widget/Archives.styl","hash":"96f17f08ca8c0eebe4e28163e8d3661571496ee8","modified":1706997611060},{"_id":"themes/hexo-theme-orange/source/css/_widget/Tags.styl","hash":"f50002e25daab7889d18d8f4f14cce72d866b708","modified":1706997611060},{"_id":"themes/hexo-theme-orange/source/css/_widget/lifes.styl","hash":"4c2a833e604dc469f816fa33424b285a2d146bad","modified":1706997611060},{"_id":"themes/hexo-theme-orange/source/css/_partial/post/toc.styl","hash":"17e552d43282c5e1d28c148a462e5c99da363b88","modified":1706997611060},{"_id":"themes/hexo-theme-orange/source/css/_partial/menu.styl","hash":"04e7c9d98942f5b1c603c9934f50c377bbccc757","modified":1706997611060},{"_id":"themes/hexo-theme-orange/source/css/_partial/highlight.styl","hash":"6b40b17d861b078db41ba1abf45c211af6ddda5c","modified":1706997611060},{"_id":"themes/hexo-theme-orange/source/css/_partial/footer.styl","hash":"a155d7436f2c2d76d6a62f142f81453fa78fd2d9","modified":1706997611060},{"_id":"themes/hexo-theme-orange/source/css/_partial/head-bar.styl","hash":"848aaaaa2d60af908006132525bc649a2a588bcf","modified":1706997611060},{"_id":"themes/hexo-theme-orange/source/css/_partial/header.styl","hash":"2972e7893cc21e5df950611783d2d21d68c13352","modified":1706997611060},{"_id":"themes/hexo-theme-orange/source/img/favicon.ico","hash":"f77216a22103448a098c4aa930e90d2f075559c1","modified":1706997611060},{"_id":"themes/hexo-theme-orange/source/js/jquery/jquery-3.1.1.min.js","hash":"f647a6d37dc4ca055ced3cf64bbc1f490070acba","modified":1706997611060}],"Category":[],"Data":[],"Page":[{"_content":"howdy my friends.\n\nmy name is jesse and i like to make stuff.\n\nsome of my other sites:\n\n* [https://github.com/steezeburger](https://github.com/steezeburger)\n* [https://siqnastee.com](https://siqnastee.com)\n* [https://mileyvirus.xyz/](https://mileyvirus.xyz/)\n* [https://www.instagram.com/steezeburger/](https://www.instagram.com/steezeburger/)\n* [https://www.instagram.com/a_cgi_steezeburger/](https://www.instagram.com/a_cgi_steezeburger/)\n","source":"about/index.md","raw":"howdy my friends.\n\nmy name is jesse and i like to make stuff.\n\nsome of my other sites:\n\n* [https://github.com/steezeburger](https://github.com/steezeburger)\n* [https://siqnastee.com](https://siqnastee.com)\n* [https://mileyvirus.xyz/](https://mileyvirus.xyz/)\n* [https://www.instagram.com/steezeburger/](https://www.instagram.com/steezeburger/)\n* [https://www.instagram.com/a_cgi_steezeburger/](https://www.instagram.com/a_cgi_steezeburger/)\n","date":"2024-02-03T22:00:11.060Z","updated":"2024-02-03T22:00:11.060Z","path":"about/index.html","title":"","comments":1,"layout":"page","_id":"cls728f2i0000ugol0l9tbw9q","content":"<p>howdy my friends.</p>\n<p>my name is jesse and i like to make stuff.</p>\n<p>some of my other sites:</p>\n<ul>\n<li><a href=\"https://github.com/steezeburger\">https://github.com/steezeburger</a></li>\n<li><a href=\"https://siqnastee.com/\">https://siqnastee.com</a></li>\n<li><a href=\"https://mileyvirus.xyz/\">https://mileyvirus.xyz/</a></li>\n<li><a href=\"https://www.instagram.com/steezeburger/\">https://www.instagram.com/steezeburger/</a></li>\n<li><a href=\"https://www.instagram.com/a_cgi_steezeburger/\">https://www.instagram.com/a_cgi_steezeburger/</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>howdy my friends.</p>\n<p>my name is jesse and i like to make stuff.</p>\n<p>some of my other sites:</p>\n<ul>\n<li><a href=\"https://github.com/steezeburger\">https://github.com/steezeburger</a></li>\n<li><a href=\"https://siqnastee.com/\">https://siqnastee.com</a></li>\n<li><a href=\"https://mileyvirus.xyz/\">https://mileyvirus.xyz/</a></li>\n<li><a href=\"https://www.instagram.com/steezeburger/\">https://www.instagram.com/steezeburger/</a></li>\n<li><a href=\"https://www.instagram.com/a_cgi_steezeburger/\">https://www.instagram.com/a_cgi_steezeburger/</a></li>\n</ul>\n"},{"title":"tags","layout":"tags","date":"2021-03-13T07:00:00.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\nlayout: tags\ndate: 2021-03-13 00:00:00\n---\n","updated":"2024-02-03T23:06:06.850Z","path":"tags/index.html","comments":1,"_id":"cls728f2m0002ugolal0v0ddr","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"date":"2021-03-14T02:24:48.000Z","_content":"\nwell hello there. welcome to my blog.\n","source":"_posts/hello-world.md","raw":"---\ndate: 2021-03-13 19:24:48\n---\n\nwell hello there. welcome to my blog.\n","slug":"hello-world","published":1,"updated":"2024-02-03T22:00:11.060Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cls728f2k0001ugoldd28d9et","content":"<p>well hello there. welcome to my blog.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>well hello there. welcome to my blog.</p>\n"},{"title":"Rathole Tunnel: Securely and Cheaply Expose Local Palworld Server","date":"2024-02-03T17:30:00.000Z","_content":"\n## Why?\n\nThe biggest reason I needed to run a reverse tunnel was to get around NAT issues, but there are several benefits:\n* I wanted to run a multiplayer game server for a recently popular game called [Palworld](https://store.steampowered.com/app/1623730/Palworld/)\n* I wanted to run the Palworld server on my local, beefy gaming maching\n* I had an issue with NAT at my router\n  * I was not able to access my game server from within my local network using its public IP. This is a common issue with NAT, and not all routers support the feature to get around this issue. The router feature is called \"NAT loopback\" or \"NAT hairpinning\", but my xfinity router did not support it.\n    * Here are some links to get a better understanding of the issue:\n      * <https://help.mikrotik.com/docs/display/ROS/NAT#NAT-HairpinNAT>\n      * <https://forums.xfinity.com/conversations/your-home-network/unable-to-connect-to-web-server-inside-my-network-with-port-forwarding/6323bf7e48c60d55e605064b?commentId=6329d82681a02c6d08bfc103>\n  * ultimately, I could still access my server using its local IP, but I was using port forwards to give my friends access. Not the most secure\n* I did not want to expose my local machine to the internet via port forwarding or DMZ\n* I did not want to pay more than $5/month for a solution\n\n## How?\n\n* local Palworld server\n  * Ubuntu 22.04 via WSL2 on my Windows gaming machine\n  * [palworld-server-docker](https://github.com/thijsvanloef/palworld-server-docker)\n* [Rathole](https://github.com/rapiz1/rathole) tunnel\n  * Rathole is a reverse tunneling tool that allows you to easily expose local services to the internet. It's written in Rust and very fast. It's similar to `localtunnel` or `ngrok`, but it's open source and you run your own server.\n  * Rathole server running on a remote VPS\n    * I went with the cheapest DigitalOcean droplet, ~$4/month\n    * My goal was to get a publicly accesible box up quickly. You could probably run Rathole on a Raspberry Pi, and this could be a good solution if you already have an rpi running at home and exposed publicly to the internet.\n  * Rathole client running on my local machine\n\n## Final Solution\n\n### Rathole Server\n* Create new droplet on Digital Ocean (DO)\n> I am using Digital Ocean because I am familiar with it, but any cheap VPS should work. We're only running a tunnel on this box, not the game server itself.\n  * Create a new project if you do not already have a DO project\n  * Create a new droplet\n    * Choose a region that is a decent middle ground between you and your friends or expected server members.\n    * Leave the default datacenter (unless you have other plans for this droplet and need [specific features that are only available in certain datacenters](https://docs.digitalocean.com/products/platform/availability-matrix/))\n    * I always choose the most recent LTS (long term support) version of Ubuntu, \"22.04 (LTS) x64\" at time of writing.\n    * Droplet type should be \"shared cpu\"\n    * CPU options > Regular, Disk Type: SSD\n    * Then choose the cheapest, $4/month option\n    * No need to add a volume\n    * Add your ssh key\n      * [How to add an SSH key to your DigitalOcean account](https://docs.digitalocean.com/products/droplets/how-to/add-ssh-keys/)\n    * Can change hostname to whatever you like, I went with `rathole`\n    * Can use any tags you want, e.g. `rathole`, `reverse-tunnel`, `palworld`, etc\n* Once the droplet has finished provisioning, ssh into it. The droplet IP will be shown on the droplets dashboard on the DO website\n  * `ssh root@<droplet-ip>` - you'll be authenticated via the ssh key you added to the droplet\n  * generally a good idea to upgrade the system after first login\n    * `sudo apt update && sudo apt upgrade -y`\n    * probably want to reboot after `sudo reboot` (note: you'll lose connection and need to ssh back in!)\n* Install Docker\n  * Some linux distributions come with unofficial docker packages, but it's [recommended to install from the official docker repository](https://docs.docker.com/engine/install/ubuntu/)\n  ```bash\n  # add Docker's official GPG key:\n  sudo apt-get update\n  sudo apt-get install ca-certificates curl\n  sudo install -m 0755 -d /etc/apt/keyrings\n  sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc\n  sudo chmod a+r /etc/apt/keyrings/docker.asc\n\n  # Add the repository to Apt sources:\n  echo \\\n    \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \\\n    $(. /etc/os-release && echo \"$VERSION_CODENAME\") stable\" | \\\n    sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\n  sudo apt-get update\n\n  # Install docker and related packages\n  sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n  ```\n* Create a project directory and necessary files\n  * Create directory and files\n  ```bash\n  mkdir ~/rathole-palworld\n  # docker-compose configuration\n  touch ~/rathole-palworld/docker-compose.yaml\n  # rathole server configuration\n  touch ~/rathole-palworld/server.toml\n  ```\n  * Populate `docker-compose.yaml`\n  ```yaml\n  # docker-compose.yaml\n  services:\n    palworld-rathole-server:\n      restart: unless-stopped\n      container_name: palworld-rathole-server\n      image: rapiz1/rathole\n      command: [\"--server\", \"/app/server.toml\"]\n      ports:\n        - 2333:2333  # for rathole communication\n        - 8211:8211/udp  # for palworld communication\n        - 27015:27015/udp  # for steam client communication\n      volumes:\n        - ./server.toml:/app/server.toml\n  ```\n  * Populate `server.toml`\n  ```toml\n  # server.toml\n  [server]\n  bind_addr = \"0.0.0.0:2333\" # `2333` specifies the port that rathole listens for clients\n  default_token = \"use_a_secret_that_only_you_know\"\n\n  [server.services.palworld]\n  type = \"udp\"\n  bind_addr = \"0.0.0.0:8211\"\n  nodelay = true\n\n  [server.services.palworld2]\n  type = \"udp\"\n  bind_addr = \"0.0.0.0:27015\"\n  nodelay = true\n  ```\n* Run Rathole server via docker compose\n```bash\n# starts the rathole server in the foreground\ndocker compose up\n```\n  * Helpful docker-compose commands\n    * `docker compose up -d` - start the server in the background\n    * `docker compose down` - stop the server\n    * `docker compose logs -f` - view the server logs\n    * `docker compose logs -f palworld-rathole-server` - view the server logs by container name\n\n### Rathole Client\n\n> NOTE: We are now going to be running a client on the same machine as the game server! So you'll be running commands in a WSL/Ubuntu terminal session that's running on your local machine now.\n\n* Create directory and files for Rathole client\n```bash\n mkdir ~/rathole-palworld\n# docker-compose configuration\ntouch ~/rathole-palworld/docker-compose.yaml\n# rathole server configuration\ntouch ~/rathole-palworld/client.toml\n```\n* Populate `docker-compose.yaml`\n```yaml\nservices:\n  palworld-rathole-client:\n    restart: unless-stopped\n    container_name: palworld-rathole-client\n    image: rapiz1/rathole\n    command: [\"--client\", \"/app/client.toml\"]\n    network_mode: host\n    volumes:\n      - ./client.toml:/app/client.toml\n```\n* Populate `client.toml` - make sure to replace `your.digital.ocean.ip` with the IP of your droplet! And the `default_token` needs to match the `default_token` in your Rathole server's `server.toml`\n```toml\n# client.toml\n[client]\nremote_addr = \"your.digital.ocean.ip:2333\" # The address of the server. The port must be the same with the port in `server.bind_addr`\ndefault_token = \"use_a_secret_that_only_you_know\"\nretry_interval = 1\n\n[client.services.palworld]\nlocal_addr = \"127.0.0.2:8211\"\ntype = \"udp\"\nnodelay = true\n\n[client.services.palworld2]\nlocal_addr = \"127.0.0.2:27015\"\ntype = \"udp\"\nnodelay = true\n```\n* Run Rathole client via docker compose\n```bash\n# starts the rathole client in the foreground\ndocker compose up\n```\n* Test connection\n  * You should now be able to connect to your Palworld server using the IP of your DigitalOcean droplet. In the Palworld mulitplayer server page, you will input something that looks like `123.123.123.90:8211`, where the left side of the colon is the IP address of your DigitalOcean droplet.\n\n## Final Notes\n\nThis solution works well to get around NAT issues and expose a local game server to the internet without exposing anything else. It's more secure than port forwarding or DMZ, and it's still quite cheap. It's been working well for my friends and I, and I hope it works well for you. I created a Github repository to help you get started with this solution. You can find it [here](https://github.com/steezeburger/palworld-rathole-docker-compose).\n\nYou can leave an issue on the repo, or you can find out how to contact me on my [Github profile](https://github.com/steezeburger) if you need any help or have any questions! You can also leave a comment on this blog post if you are logged into Github.\n\nThanks for taking the time to read this post, and I hope it helps you out!\n\n---\nPalworld things I'm working on:\n* [Palworld rathole docker compose repo](https://github.com/steezeburger/palworld-rathole-docker-compose)\n* [Palworld server analytics bot + dashboard](https://github.com/steezeburger/palguybuddydude)\n","source":"_posts/rathole-tunnel-for-palworld-server.md","raw":"---\ntitle: \"Rathole Tunnel: Securely and Cheaply Expose Local Palworld Server\"\ndate: 2024-02-03 10:30:00\ntags:\n- palworld\n- self-hosting\n- docker\n- rathole\n# - palworld-dedicated-server\n# - palworld-server-docker\n# - docker-compose\n# - devops\n# - reverse-tunnel\n# - nat\n# - proxy\n# - port-forwarding\n# - digital-ocean\n---\n\n## Why?\n\nThe biggest reason I needed to run a reverse tunnel was to get around NAT issues, but there are several benefits:\n* I wanted to run a multiplayer game server for a recently popular game called [Palworld](https://store.steampowered.com/app/1623730/Palworld/)\n* I wanted to run the Palworld server on my local, beefy gaming maching\n* I had an issue with NAT at my router\n  * I was not able to access my game server from within my local network using its public IP. This is a common issue with NAT, and not all routers support the feature to get around this issue. The router feature is called \"NAT loopback\" or \"NAT hairpinning\", but my xfinity router did not support it.\n    * Here are some links to get a better understanding of the issue:\n      * <https://help.mikrotik.com/docs/display/ROS/NAT#NAT-HairpinNAT>\n      * <https://forums.xfinity.com/conversations/your-home-network/unable-to-connect-to-web-server-inside-my-network-with-port-forwarding/6323bf7e48c60d55e605064b?commentId=6329d82681a02c6d08bfc103>\n  * ultimately, I could still access my server using its local IP, but I was using port forwards to give my friends access. Not the most secure\n* I did not want to expose my local machine to the internet via port forwarding or DMZ\n* I did not want to pay more than $5/month for a solution\n\n## How?\n\n* local Palworld server\n  * Ubuntu 22.04 via WSL2 on my Windows gaming machine\n  * [palworld-server-docker](https://github.com/thijsvanloef/palworld-server-docker)\n* [Rathole](https://github.com/rapiz1/rathole) tunnel\n  * Rathole is a reverse tunneling tool that allows you to easily expose local services to the internet. It's written in Rust and very fast. It's similar to `localtunnel` or `ngrok`, but it's open source and you run your own server.\n  * Rathole server running on a remote VPS\n    * I went with the cheapest DigitalOcean droplet, ~$4/month\n    * My goal was to get a publicly accesible box up quickly. You could probably run Rathole on a Raspberry Pi, and this could be a good solution if you already have an rpi running at home and exposed publicly to the internet.\n  * Rathole client running on my local machine\n\n## Final Solution\n\n### Rathole Server\n* Create new droplet on Digital Ocean (DO)\n> I am using Digital Ocean because I am familiar with it, but any cheap VPS should work. We're only running a tunnel on this box, not the game server itself.\n  * Create a new project if you do not already have a DO project\n  * Create a new droplet\n    * Choose a region that is a decent middle ground between you and your friends or expected server members.\n    * Leave the default datacenter (unless you have other plans for this droplet and need [specific features that are only available in certain datacenters](https://docs.digitalocean.com/products/platform/availability-matrix/))\n    * I always choose the most recent LTS (long term support) version of Ubuntu, \"22.04 (LTS) x64\" at time of writing.\n    * Droplet type should be \"shared cpu\"\n    * CPU options > Regular, Disk Type: SSD\n    * Then choose the cheapest, $4/month option\n    * No need to add a volume\n    * Add your ssh key\n      * [How to add an SSH key to your DigitalOcean account](https://docs.digitalocean.com/products/droplets/how-to/add-ssh-keys/)\n    * Can change hostname to whatever you like, I went with `rathole`\n    * Can use any tags you want, e.g. `rathole`, `reverse-tunnel`, `palworld`, etc\n* Once the droplet has finished provisioning, ssh into it. The droplet IP will be shown on the droplets dashboard on the DO website\n  * `ssh root@<droplet-ip>` - you'll be authenticated via the ssh key you added to the droplet\n  * generally a good idea to upgrade the system after first login\n    * `sudo apt update && sudo apt upgrade -y`\n    * probably want to reboot after `sudo reboot` (note: you'll lose connection and need to ssh back in!)\n* Install Docker\n  * Some linux distributions come with unofficial docker packages, but it's [recommended to install from the official docker repository](https://docs.docker.com/engine/install/ubuntu/)\n  ```bash\n  # add Docker's official GPG key:\n  sudo apt-get update\n  sudo apt-get install ca-certificates curl\n  sudo install -m 0755 -d /etc/apt/keyrings\n  sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc\n  sudo chmod a+r /etc/apt/keyrings/docker.asc\n\n  # Add the repository to Apt sources:\n  echo \\\n    \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \\\n    $(. /etc/os-release && echo \"$VERSION_CODENAME\") stable\" | \\\n    sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\n  sudo apt-get update\n\n  # Install docker and related packages\n  sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n  ```\n* Create a project directory and necessary files\n  * Create directory and files\n  ```bash\n  mkdir ~/rathole-palworld\n  # docker-compose configuration\n  touch ~/rathole-palworld/docker-compose.yaml\n  # rathole server configuration\n  touch ~/rathole-palworld/server.toml\n  ```\n  * Populate `docker-compose.yaml`\n  ```yaml\n  # docker-compose.yaml\n  services:\n    palworld-rathole-server:\n      restart: unless-stopped\n      container_name: palworld-rathole-server\n      image: rapiz1/rathole\n      command: [\"--server\", \"/app/server.toml\"]\n      ports:\n        - 2333:2333  # for rathole communication\n        - 8211:8211/udp  # for palworld communication\n        - 27015:27015/udp  # for steam client communication\n      volumes:\n        - ./server.toml:/app/server.toml\n  ```\n  * Populate `server.toml`\n  ```toml\n  # server.toml\n  [server]\n  bind_addr = \"0.0.0.0:2333\" # `2333` specifies the port that rathole listens for clients\n  default_token = \"use_a_secret_that_only_you_know\"\n\n  [server.services.palworld]\n  type = \"udp\"\n  bind_addr = \"0.0.0.0:8211\"\n  nodelay = true\n\n  [server.services.palworld2]\n  type = \"udp\"\n  bind_addr = \"0.0.0.0:27015\"\n  nodelay = true\n  ```\n* Run Rathole server via docker compose\n```bash\n# starts the rathole server in the foreground\ndocker compose up\n```\n  * Helpful docker-compose commands\n    * `docker compose up -d` - start the server in the background\n    * `docker compose down` - stop the server\n    * `docker compose logs -f` - view the server logs\n    * `docker compose logs -f palworld-rathole-server` - view the server logs by container name\n\n### Rathole Client\n\n> NOTE: We are now going to be running a client on the same machine as the game server! So you'll be running commands in a WSL/Ubuntu terminal session that's running on your local machine now.\n\n* Create directory and files for Rathole client\n```bash\n mkdir ~/rathole-palworld\n# docker-compose configuration\ntouch ~/rathole-palworld/docker-compose.yaml\n# rathole server configuration\ntouch ~/rathole-palworld/client.toml\n```\n* Populate `docker-compose.yaml`\n```yaml\nservices:\n  palworld-rathole-client:\n    restart: unless-stopped\n    container_name: palworld-rathole-client\n    image: rapiz1/rathole\n    command: [\"--client\", \"/app/client.toml\"]\n    network_mode: host\n    volumes:\n      - ./client.toml:/app/client.toml\n```\n* Populate `client.toml` - make sure to replace `your.digital.ocean.ip` with the IP of your droplet! And the `default_token` needs to match the `default_token` in your Rathole server's `server.toml`\n```toml\n# client.toml\n[client]\nremote_addr = \"your.digital.ocean.ip:2333\" # The address of the server. The port must be the same with the port in `server.bind_addr`\ndefault_token = \"use_a_secret_that_only_you_know\"\nretry_interval = 1\n\n[client.services.palworld]\nlocal_addr = \"127.0.0.2:8211\"\ntype = \"udp\"\nnodelay = true\n\n[client.services.palworld2]\nlocal_addr = \"127.0.0.2:27015\"\ntype = \"udp\"\nnodelay = true\n```\n* Run Rathole client via docker compose\n```bash\n# starts the rathole client in the foreground\ndocker compose up\n```\n* Test connection\n  * You should now be able to connect to your Palworld server using the IP of your DigitalOcean droplet. In the Palworld mulitplayer server page, you will input something that looks like `123.123.123.90:8211`, where the left side of the colon is the IP address of your DigitalOcean droplet.\n\n## Final Notes\n\nThis solution works well to get around NAT issues and expose a local game server to the internet without exposing anything else. It's more secure than port forwarding or DMZ, and it's still quite cheap. It's been working well for my friends and I, and I hope it works well for you. I created a Github repository to help you get started with this solution. You can find it [here](https://github.com/steezeburger/palworld-rathole-docker-compose).\n\nYou can leave an issue on the repo, or you can find out how to contact me on my [Github profile](https://github.com/steezeburger) if you need any help or have any questions! You can also leave a comment on this blog post if you are logged into Github.\n\nThanks for taking the time to read this post, and I hope it helps you out!\n\n---\nPalworld things I'm working on:\n* [Palworld rathole docker compose repo](https://github.com/steezeburger/palworld-rathole-docker-compose)\n* [Palworld server analytics bot + dashboard](https://github.com/steezeburger/palguybuddydude)\n","slug":"rathole-tunnel-for-palworld-server","published":1,"updated":"2024-02-04T05:25:14.747Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cls728f2m0003ugol0feh6ezq","content":"<h2 id=\"Why\"><a href=\"#Why\" class=\"headerlink\" title=\"Why?\"></a>Why?</h2><p>The biggest reason I needed to run a reverse tunnel was to get around NAT issues, but there are several benefits:</p>\n<ul>\n<li>I wanted to run a multiplayer game server for a recently popular game called <a href=\"https://store.steampowered.com/app/1623730/Palworld/\">Palworld</a></li>\n<li>I wanted to run the Palworld server on my local, beefy gaming maching</li>\n<li>I had an issue with NAT at my router<ul>\n<li>I was not able to access my game server from within my local network using its public IP. This is a common issue with NAT, and not all routers support the feature to get around this issue. The router feature is called “NAT loopback” or “NAT hairpinning”, but my xfinity router did not support it.<ul>\n<li>Here are some links to get a better understanding of the issue:<ul>\n<li><a href=\"https://help.mikrotik.com/docs/display/ROS/NAT#NAT-HairpinNAT\">https://help.mikrotik.com/docs/display/ROS/NAT#NAT-HairpinNAT</a></li>\n<li><a href=\"https://forums.xfinity.com/conversations/your-home-network/unable-to-connect-to-web-server-inside-my-network-with-port-forwarding/6323bf7e48c60d55e605064b?commentId=6329d82681a02c6d08bfc103\">https://forums.xfinity.com/conversations/your-home-network/unable-to-connect-to-web-server-inside-my-network-with-port-forwarding/6323bf7e48c60d55e605064b?commentId=6329d82681a02c6d08bfc103</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>ultimately, I could still access my server using its local IP, but I was using port forwards to give my friends access. Not the most secure</li>\n</ul>\n</li>\n<li>I did not want to expose my local machine to the internet via port forwarding or DMZ</li>\n<li>I did not want to pay more than $5/month for a solution</li>\n</ul>\n<h2 id=\"How\"><a href=\"#How\" class=\"headerlink\" title=\"How?\"></a>How?</h2><ul>\n<li>local Palworld server<ul>\n<li>Ubuntu 22.04 via WSL2 on my Windows gaming machine</li>\n<li><a href=\"https://github.com/thijsvanloef/palworld-server-docker\">palworld-server-docker</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/rapiz1/rathole\">Rathole</a> tunnel<ul>\n<li>Rathole is a reverse tunneling tool that allows you to easily expose local services to the internet. It’s written in Rust and very fast. It’s similar to <code>localtunnel</code> or <code>ngrok</code>, but it’s open source and you run your own server.</li>\n<li>Rathole server running on a remote VPS<ul>\n<li>I went with the cheapest DigitalOcean droplet, ~$4/month</li>\n<li>My goal was to get a publicly accesible box up quickly. You could probably run Rathole on a Raspberry Pi, and this could be a good solution if you already have an rpi running at home and exposed publicly to the internet.</li>\n</ul>\n</li>\n<li>Rathole client running on my local machine</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Final-Solution\"><a href=\"#Final-Solution\" class=\"headerlink\" title=\"Final Solution\"></a>Final Solution</h2><h3 id=\"Rathole-Server\"><a href=\"#Rathole-Server\" class=\"headerlink\" title=\"Rathole Server\"></a>Rathole Server</h3><ul>\n<li>Create new droplet on Digital Ocean (DO)<blockquote>\n<p>I am using Digital Ocean because I am familiar with it, but any cheap VPS should work. We’re only running a tunnel on this box, not the game server itself.</p>\n</blockquote>\n<ul>\n<li>Create a new project if you do not already have a DO project</li>\n<li>Create a new droplet<ul>\n<li>Choose a region that is a decent middle ground between you and your friends or expected server members.</li>\n<li>Leave the default datacenter (unless you have other plans for this droplet and need <a href=\"https://docs.digitalocean.com/products/platform/availability-matrix/\">specific features that are only available in certain datacenters</a>)</li>\n<li>I always choose the most recent LTS (long term support) version of Ubuntu, “22.04 (LTS) x64” at time of writing.</li>\n<li>Droplet type should be “shared cpu”</li>\n<li>CPU options &gt; Regular, Disk Type: SSD</li>\n<li>Then choose the cheapest, $4/month option</li>\n<li>No need to add a volume</li>\n<li>Add your ssh key<ul>\n<li><a href=\"https://docs.digitalocean.com/products/droplets/how-to/add-ssh-keys/\">How to add an SSH key to your DigitalOcean account</a></li>\n</ul>\n</li>\n<li>Can change hostname to whatever you like, I went with <code>rathole</code></li>\n<li>Can use any tags you want, e.g. <code>rathole</code>, <code>reverse-tunnel</code>, <code>palworld</code>, etc</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Once the droplet has finished provisioning, ssh into it. The droplet IP will be shown on the droplets dashboard on the DO website<ul>\n<li><code>ssh root@&lt;droplet-ip&gt;</code> - you’ll be authenticated via the ssh key you added to the droplet</li>\n<li>generally a good idea to upgrade the system after first login<ul>\n<li><code>sudo apt update &amp;&amp; sudo apt upgrade -y</code></li>\n<li>probably want to reboot after <code>sudo reboot</code> (note: you’ll lose connection and need to ssh back in!)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Install Docker<ul>\n<li>Some linux distributions come with unofficial docker packages, but it’s <a href=\"https://docs.docker.com/engine/install/ubuntu/\">recommended to install from the official docker repository</a><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># add Docker&#x27;s official GPG key:</span></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install ca-certificates curl</span><br><span class=\"line\">sudo install -m 0755 -d /etc/apt/keyrings</span><br><span class=\"line\">sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc</span><br><span class=\"line\">sudo <span class=\"built_in\">chmod</span> a+r /etc/apt/keyrings/docker.asc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Add the repository to Apt sources:</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> \\</span><br><span class=\"line\">  <span class=\"string\">&quot;deb [arch=<span class=\"subst\">$(dpkg --print-architecture)</span> signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \\</span></span><br><span class=\"line\"><span class=\"string\">  <span class=\"subst\">$(. /etc/os-release &amp;&amp; echo <span class=\"string\">&quot;<span class=\"variable\">$VERSION_CODENAME</span>&quot;</span>)</span> stable&quot;</span> | \\</span><br><span class=\"line\">  sudo <span class=\"built_in\">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Install docker and related packages</span></span><br><span class=\"line\">sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>Create a project directory and necessary files<ul>\n<li>Create directory and files<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> ~/rathole-palworld</span><br><span class=\"line\"><span class=\"comment\"># docker-compose configuration</span></span><br><span class=\"line\"><span class=\"built_in\">touch</span> ~/rathole-palworld/docker-compose.yaml</span><br><span class=\"line\"><span class=\"comment\"># rathole server configuration</span></span><br><span class=\"line\"><span class=\"built_in\">touch</span> ~/rathole-palworld/server.toml</span><br></pre></td></tr></table></figure></li>\n<li>Populate <code>docker-compose.yaml</code><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># docker-compose.yaml</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">palworld-rathole-server:</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">unless-stopped</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">palworld-rathole-server</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">rapiz1/rathole</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> [<span class=\"string\">&quot;--server&quot;</span>, <span class=\"string\">&quot;/app/server.toml&quot;</span>]</span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">2333</span><span class=\"string\">:2333</span>  <span class=\"comment\"># for rathole communication</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">8211</span><span class=\"string\">:8211/udp</span>  <span class=\"comment\"># for palworld communication</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">27015</span><span class=\"string\">:27015/udp</span>  <span class=\"comment\"># for steam client communication</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./server.toml:/app/server.toml</span></span><br></pre></td></tr></table></figure></li>\n<li>Populate <code>server.toml</code><figure class=\"highlight toml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># server.toml</span></span><br><span class=\"line\"><span class=\"section\">[server]</span></span><br><span class=\"line\"><span class=\"attr\">bind_addr</span> = <span class=\"string\">&quot;0.0.0.0:2333&quot;</span> <span class=\"comment\"># `2333` specifies the port that rathole listens for clients</span></span><br><span class=\"line\"><span class=\"attr\">default_token</span> = <span class=\"string\">&quot;use_a_secret_that_only_you_know&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[server.services.palworld]</span></span><br><span class=\"line\"><span class=\"attr\">type</span> = <span class=\"string\">&quot;udp&quot;</span></span><br><span class=\"line\"><span class=\"attr\">bind_addr</span> = <span class=\"string\">&quot;0.0.0.0:8211&quot;</span></span><br><span class=\"line\"><span class=\"attr\">nodelay</span> = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[server.services.palworld2]</span></span><br><span class=\"line\"><span class=\"attr\">type</span> = <span class=\"string\">&quot;udp&quot;</span></span><br><span class=\"line\"><span class=\"attr\">bind_addr</span> = <span class=\"string\">&quot;0.0.0.0:27015&quot;</span></span><br><span class=\"line\"><span class=\"attr\">nodelay</span> = <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>Run Rathole server via docker compose<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># starts the rathole server in the foreground</span></span><br><span class=\"line\">docker compose up</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Helpful docker-compose commands<ul>\n<li><code>docker compose up -d</code> - start the server in the background</li>\n<li><code>docker compose down</code> - stop the server</li>\n<li><code>docker compose logs -f</code> - view the server logs</li>\n<li><code>docker compose logs -f palworld-rathole-server</code> - view the server logs by container name</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Rathole-Client\"><a href=\"#Rathole-Client\" class=\"headerlink\" title=\"Rathole Client\"></a>Rathole Client</h3><blockquote>\n<p>NOTE: We are now going to be running a client on the same machine as the game server! So you’ll be running commands in a WSL/Ubuntu terminal session that’s running on your local machine now.</p>\n</blockquote>\n<ul>\n<li>Create directory and files for Rathole client<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"built_in\">mkdir</span> ~/rathole-palworld</span><br><span class=\"line\"><span class=\"comment\"># docker-compose configuration</span></span><br><span class=\"line\"><span class=\"built_in\">touch</span> ~/rathole-palworld/docker-compose.yaml</span><br><span class=\"line\"><span class=\"comment\"># rathole server configuration</span></span><br><span class=\"line\"><span class=\"built_in\">touch</span> ~/rathole-palworld/client.toml</span><br></pre></td></tr></table></figure></li>\n<li>Populate <code>docker-compose.yaml</code><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">palworld-rathole-client:</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">unless-stopped</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">palworld-rathole-client</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">rapiz1/rathole</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> [<span class=\"string\">&quot;--client&quot;</span>, <span class=\"string\">&quot;/app/client.toml&quot;</span>]</span><br><span class=\"line\">    <span class=\"attr\">network_mode:</span> <span class=\"string\">host</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./client.toml:/app/client.toml</span></span><br></pre></td></tr></table></figure></li>\n<li>Populate <code>client.toml</code> - make sure to replace <code>your.digital.ocean.ip</code> with the IP of your droplet! And the <code>default_token</code> needs to match the <code>default_token</code> in your Rathole server’s <code>server.toml</code><figure class=\"highlight toml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># client.toml</span></span><br><span class=\"line\"><span class=\"section\">[client]</span></span><br><span class=\"line\"><span class=\"attr\">remote_addr</span> = <span class=\"string\">&quot;your.digital.ocean.ip:2333&quot;</span> <span class=\"comment\"># The address of the server. The port must be the same with the port in `server.bind_addr`</span></span><br><span class=\"line\"><span class=\"attr\">default_token</span> = <span class=\"string\">&quot;use_a_secret_that_only_you_know&quot;</span></span><br><span class=\"line\"><span class=\"attr\">retry_interval</span> = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[client.services.palworld]</span></span><br><span class=\"line\"><span class=\"attr\">local_addr</span> = <span class=\"string\">&quot;127.0.0.2:8211&quot;</span></span><br><span class=\"line\"><span class=\"attr\">type</span> = <span class=\"string\">&quot;udp&quot;</span></span><br><span class=\"line\"><span class=\"attr\">nodelay</span> = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[client.services.palworld2]</span></span><br><span class=\"line\"><span class=\"attr\">local_addr</span> = <span class=\"string\">&quot;127.0.0.2:27015&quot;</span></span><br><span class=\"line\"><span class=\"attr\">type</span> = <span class=\"string\">&quot;udp&quot;</span></span><br><span class=\"line\"><span class=\"attr\">nodelay</span> = <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></li>\n<li>Run Rathole client via docker compose<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># starts the rathole client in the foreground</span></span><br><span class=\"line\">docker compose up</span><br></pre></td></tr></table></figure></li>\n<li>Test connection<ul>\n<li>You should now be able to connect to your Palworld server using the IP of your DigitalOcean droplet. In the Palworld mulitplayer server page, you will input something that looks like <code>123.123.123.90:8211</code>, where the left side of the colon is the IP address of your DigitalOcean droplet.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Final-Notes\"><a href=\"#Final-Notes\" class=\"headerlink\" title=\"Final Notes\"></a>Final Notes</h2><p>This solution works well to get around NAT issues and expose a local game server to the internet without exposing anything else. It’s more secure than port forwarding or DMZ, and it’s still quite cheap. It’s been working well for my friends and I, and I hope it works well for you. I created a Github repository to help you get started with this solution. You can find it <a href=\"https://github.com/steezeburger/palworld-rathole-docker-compose\">here</a>.</p>\n<p>You can leave an issue on the repo, or you can find out how to contact me on my <a href=\"https://github.com/steezeburger\">Github profile</a> if you need any help or have any questions! You can also leave a comment on this blog post if you are logged into Github.</p>\n<p>Thanks for taking the time to read this post, and I hope it helps you out!</p>\n<hr>\n<p>Palworld things I’m working on:</p>\n<ul>\n<li><a href=\"https://github.com/steezeburger/palworld-rathole-docker-compose\">Palworld rathole docker compose repo</a></li>\n<li><a href=\"https://github.com/steezeburger/palguybuddydude\">Palworld server analytics bot + dashboard</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Why\"><a href=\"#Why\" class=\"headerlink\" title=\"Why?\"></a>Why?</h2><p>The biggest reason I needed to run a reverse tunnel was to get around NAT issues, but there are several benefits:</p>\n<ul>\n<li>I wanted to run a multiplayer game server for a recently popular game called <a href=\"https://store.steampowered.com/app/1623730/Palworld/\">Palworld</a></li>\n<li>I wanted to run the Palworld server on my local, beefy gaming maching</li>\n<li>I had an issue with NAT at my router<ul>\n<li>I was not able to access my game server from within my local network using its public IP. This is a common issue with NAT, and not all routers support the feature to get around this issue. The router feature is called “NAT loopback” or “NAT hairpinning”, but my xfinity router did not support it.<ul>\n<li>Here are some links to get a better understanding of the issue:<ul>\n<li><a href=\"https://help.mikrotik.com/docs/display/ROS/NAT#NAT-HairpinNAT\">https://help.mikrotik.com/docs/display/ROS/NAT#NAT-HairpinNAT</a></li>\n<li><a href=\"https://forums.xfinity.com/conversations/your-home-network/unable-to-connect-to-web-server-inside-my-network-with-port-forwarding/6323bf7e48c60d55e605064b?commentId=6329d82681a02c6d08bfc103\">https://forums.xfinity.com/conversations/your-home-network/unable-to-connect-to-web-server-inside-my-network-with-port-forwarding/6323bf7e48c60d55e605064b?commentId=6329d82681a02c6d08bfc103</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>ultimately, I could still access my server using its local IP, but I was using port forwards to give my friends access. Not the most secure</li>\n</ul>\n</li>\n<li>I did not want to expose my local machine to the internet via port forwarding or DMZ</li>\n<li>I did not want to pay more than $5/month for a solution</li>\n</ul>\n<h2 id=\"How\"><a href=\"#How\" class=\"headerlink\" title=\"How?\"></a>How?</h2><ul>\n<li>local Palworld server<ul>\n<li>Ubuntu 22.04 via WSL2 on my Windows gaming machine</li>\n<li><a href=\"https://github.com/thijsvanloef/palworld-server-docker\">palworld-server-docker</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/rapiz1/rathole\">Rathole</a> tunnel<ul>\n<li>Rathole is a reverse tunneling tool that allows you to easily expose local services to the internet. It’s written in Rust and very fast. It’s similar to <code>localtunnel</code> or <code>ngrok</code>, but it’s open source and you run your own server.</li>\n<li>Rathole server running on a remote VPS<ul>\n<li>I went with the cheapest DigitalOcean droplet, ~$4/month</li>\n<li>My goal was to get a publicly accesible box up quickly. You could probably run Rathole on a Raspberry Pi, and this could be a good solution if you already have an rpi running at home and exposed publicly to the internet.</li>\n</ul>\n</li>\n<li>Rathole client running on my local machine</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Final-Solution\"><a href=\"#Final-Solution\" class=\"headerlink\" title=\"Final Solution\"></a>Final Solution</h2><h3 id=\"Rathole-Server\"><a href=\"#Rathole-Server\" class=\"headerlink\" title=\"Rathole Server\"></a>Rathole Server</h3><ul>\n<li>Create new droplet on Digital Ocean (DO)<blockquote>\n<p>I am using Digital Ocean because I am familiar with it, but any cheap VPS should work. We’re only running a tunnel on this box, not the game server itself.</p>\n</blockquote>\n<ul>\n<li>Create a new project if you do not already have a DO project</li>\n<li>Create a new droplet<ul>\n<li>Choose a region that is a decent middle ground between you and your friends or expected server members.</li>\n<li>Leave the default datacenter (unless you have other plans for this droplet and need <a href=\"https://docs.digitalocean.com/products/platform/availability-matrix/\">specific features that are only available in certain datacenters</a>)</li>\n<li>I always choose the most recent LTS (long term support) version of Ubuntu, “22.04 (LTS) x64” at time of writing.</li>\n<li>Droplet type should be “shared cpu”</li>\n<li>CPU options &gt; Regular, Disk Type: SSD</li>\n<li>Then choose the cheapest, $4/month option</li>\n<li>No need to add a volume</li>\n<li>Add your ssh key<ul>\n<li><a href=\"https://docs.digitalocean.com/products/droplets/how-to/add-ssh-keys/\">How to add an SSH key to your DigitalOcean account</a></li>\n</ul>\n</li>\n<li>Can change hostname to whatever you like, I went with <code>rathole</code></li>\n<li>Can use any tags you want, e.g. <code>rathole</code>, <code>reverse-tunnel</code>, <code>palworld</code>, etc</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Once the droplet has finished provisioning, ssh into it. The droplet IP will be shown on the droplets dashboard on the DO website<ul>\n<li><code>ssh root@&lt;droplet-ip&gt;</code> - you’ll be authenticated via the ssh key you added to the droplet</li>\n<li>generally a good idea to upgrade the system after first login<ul>\n<li><code>sudo apt update &amp;&amp; sudo apt upgrade -y</code></li>\n<li>probably want to reboot after <code>sudo reboot</code> (note: you’ll lose connection and need to ssh back in!)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Install Docker<ul>\n<li>Some linux distributions come with unofficial docker packages, but it’s <a href=\"https://docs.docker.com/engine/install/ubuntu/\">recommended to install from the official docker repository</a><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># add Docker&#x27;s official GPG key:</span></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install ca-certificates curl</span><br><span class=\"line\">sudo install -m 0755 -d /etc/apt/keyrings</span><br><span class=\"line\">sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc</span><br><span class=\"line\">sudo <span class=\"built_in\">chmod</span> a+r /etc/apt/keyrings/docker.asc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Add the repository to Apt sources:</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> \\</span><br><span class=\"line\">  <span class=\"string\">&quot;deb [arch=<span class=\"subst\">$(dpkg --print-architecture)</span> signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \\</span></span><br><span class=\"line\"><span class=\"string\">  <span class=\"subst\">$(. /etc/os-release &amp;&amp; echo <span class=\"string\">&quot;<span class=\"variable\">$VERSION_CODENAME</span>&quot;</span>)</span> stable&quot;</span> | \\</span><br><span class=\"line\">  sudo <span class=\"built_in\">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Install docker and related packages</span></span><br><span class=\"line\">sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>Create a project directory and necessary files<ul>\n<li>Create directory and files<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> ~/rathole-palworld</span><br><span class=\"line\"><span class=\"comment\"># docker-compose configuration</span></span><br><span class=\"line\"><span class=\"built_in\">touch</span> ~/rathole-palworld/docker-compose.yaml</span><br><span class=\"line\"><span class=\"comment\"># rathole server configuration</span></span><br><span class=\"line\"><span class=\"built_in\">touch</span> ~/rathole-palworld/server.toml</span><br></pre></td></tr></table></figure></li>\n<li>Populate <code>docker-compose.yaml</code><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># docker-compose.yaml</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">palworld-rathole-server:</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">unless-stopped</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">palworld-rathole-server</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">rapiz1/rathole</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> [<span class=\"string\">&quot;--server&quot;</span>, <span class=\"string\">&quot;/app/server.toml&quot;</span>]</span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">2333</span><span class=\"string\">:2333</span>  <span class=\"comment\"># for rathole communication</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">8211</span><span class=\"string\">:8211/udp</span>  <span class=\"comment\"># for palworld communication</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">27015</span><span class=\"string\">:27015/udp</span>  <span class=\"comment\"># for steam client communication</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./server.toml:/app/server.toml</span></span><br></pre></td></tr></table></figure></li>\n<li>Populate <code>server.toml</code><figure class=\"highlight toml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># server.toml</span></span><br><span class=\"line\"><span class=\"section\">[server]</span></span><br><span class=\"line\"><span class=\"attr\">bind_addr</span> = <span class=\"string\">&quot;0.0.0.0:2333&quot;</span> <span class=\"comment\"># `2333` specifies the port that rathole listens for clients</span></span><br><span class=\"line\"><span class=\"attr\">default_token</span> = <span class=\"string\">&quot;use_a_secret_that_only_you_know&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[server.services.palworld]</span></span><br><span class=\"line\"><span class=\"attr\">type</span> = <span class=\"string\">&quot;udp&quot;</span></span><br><span class=\"line\"><span class=\"attr\">bind_addr</span> = <span class=\"string\">&quot;0.0.0.0:8211&quot;</span></span><br><span class=\"line\"><span class=\"attr\">nodelay</span> = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[server.services.palworld2]</span></span><br><span class=\"line\"><span class=\"attr\">type</span> = <span class=\"string\">&quot;udp&quot;</span></span><br><span class=\"line\"><span class=\"attr\">bind_addr</span> = <span class=\"string\">&quot;0.0.0.0:27015&quot;</span></span><br><span class=\"line\"><span class=\"attr\">nodelay</span> = <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>Run Rathole server via docker compose<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># starts the rathole server in the foreground</span></span><br><span class=\"line\">docker compose up</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Helpful docker-compose commands<ul>\n<li><code>docker compose up -d</code> - start the server in the background</li>\n<li><code>docker compose down</code> - stop the server</li>\n<li><code>docker compose logs -f</code> - view the server logs</li>\n<li><code>docker compose logs -f palworld-rathole-server</code> - view the server logs by container name</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Rathole-Client\"><a href=\"#Rathole-Client\" class=\"headerlink\" title=\"Rathole Client\"></a>Rathole Client</h3><blockquote>\n<p>NOTE: We are now going to be running a client on the same machine as the game server! So you’ll be running commands in a WSL/Ubuntu terminal session that’s running on your local machine now.</p>\n</blockquote>\n<ul>\n<li>Create directory and files for Rathole client<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"built_in\">mkdir</span> ~/rathole-palworld</span><br><span class=\"line\"><span class=\"comment\"># docker-compose configuration</span></span><br><span class=\"line\"><span class=\"built_in\">touch</span> ~/rathole-palworld/docker-compose.yaml</span><br><span class=\"line\"><span class=\"comment\"># rathole server configuration</span></span><br><span class=\"line\"><span class=\"built_in\">touch</span> ~/rathole-palworld/client.toml</span><br></pre></td></tr></table></figure></li>\n<li>Populate <code>docker-compose.yaml</code><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">palworld-rathole-client:</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">unless-stopped</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">palworld-rathole-client</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">rapiz1/rathole</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> [<span class=\"string\">&quot;--client&quot;</span>, <span class=\"string\">&quot;/app/client.toml&quot;</span>]</span><br><span class=\"line\">    <span class=\"attr\">network_mode:</span> <span class=\"string\">host</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./client.toml:/app/client.toml</span></span><br></pre></td></tr></table></figure></li>\n<li>Populate <code>client.toml</code> - make sure to replace <code>your.digital.ocean.ip</code> with the IP of your droplet! And the <code>default_token</code> needs to match the <code>default_token</code> in your Rathole server’s <code>server.toml</code><figure class=\"highlight toml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># client.toml</span></span><br><span class=\"line\"><span class=\"section\">[client]</span></span><br><span class=\"line\"><span class=\"attr\">remote_addr</span> = <span class=\"string\">&quot;your.digital.ocean.ip:2333&quot;</span> <span class=\"comment\"># The address of the server. The port must be the same with the port in `server.bind_addr`</span></span><br><span class=\"line\"><span class=\"attr\">default_token</span> = <span class=\"string\">&quot;use_a_secret_that_only_you_know&quot;</span></span><br><span class=\"line\"><span class=\"attr\">retry_interval</span> = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[client.services.palworld]</span></span><br><span class=\"line\"><span class=\"attr\">local_addr</span> = <span class=\"string\">&quot;127.0.0.2:8211&quot;</span></span><br><span class=\"line\"><span class=\"attr\">type</span> = <span class=\"string\">&quot;udp&quot;</span></span><br><span class=\"line\"><span class=\"attr\">nodelay</span> = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[client.services.palworld2]</span></span><br><span class=\"line\"><span class=\"attr\">local_addr</span> = <span class=\"string\">&quot;127.0.0.2:27015&quot;</span></span><br><span class=\"line\"><span class=\"attr\">type</span> = <span class=\"string\">&quot;udp&quot;</span></span><br><span class=\"line\"><span class=\"attr\">nodelay</span> = <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></li>\n<li>Run Rathole client via docker compose<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># starts the rathole client in the foreground</span></span><br><span class=\"line\">docker compose up</span><br></pre></td></tr></table></figure></li>\n<li>Test connection<ul>\n<li>You should now be able to connect to your Palworld server using the IP of your DigitalOcean droplet. In the Palworld mulitplayer server page, you will input something that looks like <code>123.123.123.90:8211</code>, where the left side of the colon is the IP address of your DigitalOcean droplet.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Final-Notes\"><a href=\"#Final-Notes\" class=\"headerlink\" title=\"Final Notes\"></a>Final Notes</h2><p>This solution works well to get around NAT issues and expose a local game server to the internet without exposing anything else. It’s more secure than port forwarding or DMZ, and it’s still quite cheap. It’s been working well for my friends and I, and I hope it works well for you. I created a Github repository to help you get started with this solution. You can find it <a href=\"https://github.com/steezeburger/palworld-rathole-docker-compose\">here</a>.</p>\n<p>You can leave an issue on the repo, or you can find out how to contact me on my <a href=\"https://github.com/steezeburger\">Github profile</a> if you need any help or have any questions! You can also leave a comment on this blog post if you are logged into Github.</p>\n<p>Thanks for taking the time to read this post, and I hope it helps you out!</p>\n<hr>\n<p>Palworld things I’m working on:</p>\n<ul>\n<li><a href=\"https://github.com/steezeburger/palworld-rathole-docker-compose\">Palworld rathole docker compose repo</a></li>\n<li><a href=\"https://github.com/steezeburger/palguybuddydude\">Palworld server analytics bot + dashboard</a></li>\n</ul>\n"},{"title":"katas","date":"2021-03-28T11:05:00.000Z","_content":"\nA kata is something borrowed from Japanese martial arts and is something I have seen a lot as a suggestion when learning software development.\n\n\nKata is a Japanese word that means \"form\". The idea is to practice the same movements often enough that they become second nature. In software development, a developer may use katas to practice things like creating a new router in an app, or maybe writing an algorithm to find all primes up to a specified number. Just short practice items. This practice can lead to more time and mental capacity to think about more important problems that you are trying to solve in your work. It helps keep you sharp and is a fun way to learn new languages and practice algorithms at the same time as well.\n\nI've been learning Blender recently, and I didn't really see any short practice lists or challenges to complete when learning digital modeling and CAD.\n\nSo, if you find this page and are also learning a new modeling program, I challenge you to model the following items:\n\n* ink pen\n* mug\n* usb flash drive\n* three legged stool\n","source":"_posts/katas.md","raw":"---\ntitle: katas\ndate: 2021-03-28 05:05:00\ntags:\n    - blender\n    - cad\n    - learning\n---\n\nA kata is something borrowed from Japanese martial arts and is something I have seen a lot as a suggestion when learning software development.\n\n\nKata is a Japanese word that means \"form\". The idea is to practice the same movements often enough that they become second nature. In software development, a developer may use katas to practice things like creating a new router in an app, or maybe writing an algorithm to find all primes up to a specified number. Just short practice items. This practice can lead to more time and mental capacity to think about more important problems that you are trying to solve in your work. It helps keep you sharp and is a fun way to learn new languages and practice algorithms at the same time as well.\n\nI've been learning Blender recently, and I didn't really see any short practice lists or challenges to complete when learning digital modeling and CAD.\n\nSo, if you find this page and are also learning a new modeling program, I challenge you to model the following items:\n\n* ink pen\n* mug\n* usb flash drive\n* three legged stool\n","slug":"katas","published":1,"updated":"2024-02-03T22:00:11.060Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cls728f2n0004ugol6pr9a7wj","content":"<p>A kata is something borrowed from Japanese martial arts and is something I have seen a lot as a suggestion when learning software development.</p>\n<p>Kata is a Japanese word that means “form”. The idea is to practice the same movements often enough that they become second nature. In software development, a developer may use katas to practice things like creating a new router in an app, or maybe writing an algorithm to find all primes up to a specified number. Just short practice items. This practice can lead to more time and mental capacity to think about more important problems that you are trying to solve in your work. It helps keep you sharp and is a fun way to learn new languages and practice algorithms at the same time as well.</p>\n<p>I’ve been learning Blender recently, and I didn’t really see any short practice lists or challenges to complete when learning digital modeling and CAD.</p>\n<p>So, if you find this page and are also learning a new modeling program, I challenge you to model the following items:</p>\n<ul>\n<li>ink pen</li>\n<li>mug</li>\n<li>usb flash drive</li>\n<li>three legged stool</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>A kata is something borrowed from Japanese martial arts and is something I have seen a lot as a suggestion when learning software development.</p>\n<p>Kata is a Japanese word that means “form”. The idea is to practice the same movements often enough that they become second nature. In software development, a developer may use katas to practice things like creating a new router in an app, or maybe writing an algorithm to find all primes up to a specified number. Just short practice items. This practice can lead to more time and mental capacity to think about more important problems that you are trying to solve in your work. It helps keep you sharp and is a fun way to learn new languages and practice algorithms at the same time as well.</p>\n<p>I’ve been learning Blender recently, and I didn’t really see any short practice lists or challenges to complete when learning digital modeling and CAD.</p>\n<p>So, if you find this page and are also learning a new modeling program, I challenge you to model the following items:</p>\n<ul>\n<li>ink pen</li>\n<li>mug</li>\n<li>usb flash drive</li>\n<li>three legged stool</li>\n</ul>\n"},{"title":"Rust Hierarchical Configurations from Files, Environment Variables, and CLI Args with Figment and Clap.","date":"2023-03-09T02:24:48.000Z","_content":"\n## Why?\n\nI've been working with Rust lately and I recently needed to implement a program where the configuration could be set through a file, environment variables, and cli args, with the latter overriding the former.\n\nThis is called a hierarchical configuration, and it is the recommended way of handling configuration in your applications.\n\nThere are several benefits to using hierarchical configuration. A few of them are:\n\n* **Easier testing** - you can easily test your app with different configurations and in different environments. e.g. cli w/ cli args, ide w/ file, cloud environments w/ environment variables, etc.\n\n* **Improved portability** - you can easily override single configuration values for deployment to any environment. [12 Factor App](https://12factor.net/) recommends setting configuration values with environment variables. This is no problem with the setup I recommend.\n\n* **Flexibility** - you can provide different levels of configuration customization for different users for different use cases, e.g. you can provide default configuration for most users but let power users override these values with environment variables or command line arguments.\n\n\nFigment has some suggestions for how to use it with Clap, but their example did not fit my use case, and I had trouble finding examples of how to implement this properly. That is why I decided to write this blog post!\n\n\n## How?\n\nThere are a few Rust crates that support hierarchical configurations. I chose [Figment](https://crates.io/crates/figment) because it was the only layered config crate that could handle values directly from the Serialize type. This was necessary to support command line arguments. We also need [Clap](https://crates.io/crates/clap) for command line argument parsing and [Serde](https://crates.io/crates/serde) for serialization of these command line arguments so that the argument values will be deserialized into the correct Rust types.\n\nFigment actually has a nice little section in the [documentation](https://docs.rs/figment/0.10.8/figment/#for-cli-application-authors) that explains how to use Figment with Clap, but there are a few differences with how they set up their configurations. They chose to load the configurations in a different order than is recommended for hierarchical configurations.\n\n```rust\nuse clap::Parser;\nuse figment::{Figment, providers::{Serialized, Toml, Env, Format}};\nuse serde::{Serialize, Deserialize};\n\n#[derive(Parser, Debug)]\nstruct Config {\n   /// Name of the person to greet.\n   #[clap(short, long, value_parser)]\n   name: String,\n\n   /// Number of times to greet\n   #[clap(short, long, value_parser, default_value_t = 1)]\n   count: u8,\n}\n\n// Parse CLI arguments. Override CLI config values with those in\n// `Config.toml` and `APP_`-prefixed environment variables.\nlet config: Config = Figment::new()\n    .merge(Serialized::defaults(Config::parse()))\n    .merge(Toml::file(\"Config.toml\"))\n    .merge(Env::prefixed(\"APP_\"))\n    .extract()?;\n```\n\nTheir ordering is `cli args < file < environment variables`, but we want `file < environment variables < cli args`. We could simply reorder the `merge` calls. Let's try that.\n\n```rust\n// Parse CLI arguments. Override CLI config values with those in\n// `Config.toml` and `APP_`-prefixed environment variables.\nlet config: Config = Figment::new()\n    .merge(Toml::file(\"Config.toml\"))\n    .merge(Env::prefixed(\"APP_\"))\n    .merge(Serialized::defaults(Config::parse()))\n    .extract()?;\n```\n\nHowever, this causes an issue. This will force you to use command line arguments, because if you don't, the values would be `None`, but your `Config` struct's values are not `Option<T>`, so they can't be `None`. Your code will panic! Okay, so what if we refactored `Config` to use `Option<T>`s?\n\n```rust\n#[derive(Parser, Debug)]\nstruct Config {\n    /// Name of the person to greet.\n    #[clap(short, long, value_parser)]\n    name: Option<String>,\n\n    /// Number of times to greet\n    #[clap(short, long, value_parser, default_value_t = 1)]\n    count: Option<u8>,\n}\n```\n\nWe now run into another issue. If we called the program without command line arguments specified, the `Config`'s values would be `None`. This would override the previous configuration values set by the file or environment variables with `None`! This means we are still basically forced to use command line arguments.\n\n## Final Solution\n\nThe final solution required adding a separate struct to handle the command line arguments, along with a helper from `Serde` that skips serialization of values if they are `None`.\n\n```rust\n// cli.rs\nuse clap::Parser;\nuse serde::Serialize;\n\n#[derive(Debug, Parser, Serialize)]\npub(crate) struct Cli {\n    /// The name\n    #[arg(long = \"name\")]\n    #[serde(skip_serializing_if = \"::std::option::Option::is_none\")]\n    pub(crate) name: Option<String>,\n\n    /// The count\n    #[arg(long = \"count\")]\n    #[serde(skip_serializing_if = \"::std::option::Option::is_none\")]\n    pub(crate) count: Option<u8>,\n}\n```\n\nNotice the `#[serde(skip_serializing_if = \"::std::option::Option::is_none\")]`! This means the value will not be included in the serialized struct if it was not set on the command line.\n\n```rust\n// config.rs\nuse serde::{Deserialize, Serialize};\n\n/// The global configuration for the driver and its components.\n#[derive(Serialize, Deserialize)]\npub(crate) struct Config {\n    /// The name\n    pub(crate) name: String,\n\n    /// The count\n    pub(crate) count: u8,\n}\n\n```\n\n```rust\nuse clap::Parser;\nuse color_eyre::eyre::Result;\nuse figment::{\n    Figment,\n    providers::{Env, Format, Serialized, Toml},\n};\n\n// main.rs\nuse crate::cli::Cli;\nuse crate::config::Config;\n\npub(crate) mod cli;\npub(crate) mod config;\n\npub async fn run() -> Result<()> {\n    // hierarchical config. cli args override envars which override toml config values\n    let conf: Config = Figment::new()\n        .merge(Toml::file(\"Config.toml\"))\n        .merge(Env::prefixed(\"APP_\"))\n        .merge(Serialized::defaults(Cli::parse()))\n        .extract()?;\n```\n\nNow we can elegantly set configuration values with Toml files, environment variables, and command line arguments in a sane way!\n\nYou can see a full example in action in this repo I am currently working on at my new company, [Astria](https://astria.org/).\n\nhttps://github.com/astriaorg/astria-conductor\n\nFeel free to follow me on [Github](https://github.com/steezeburger) or shoot me an e-mail! My e-mail address can be found on my Github profile.\n","source":"_posts/rust-hierarchical-configuration.md","raw":"---\ntitle: Rust Hierarchical Configurations from Files, Environment Variables, and CLI Args with Figment and Clap.\ndate: 2023-03-08 19:24:48\ntags:\n- rust\n- figment\n- clap\n- configuration\n- cli\n---\n\n## Why?\n\nI've been working with Rust lately and I recently needed to implement a program where the configuration could be set through a file, environment variables, and cli args, with the latter overriding the former.\n\nThis is called a hierarchical configuration, and it is the recommended way of handling configuration in your applications.\n\nThere are several benefits to using hierarchical configuration. A few of them are:\n\n* **Easier testing** - you can easily test your app with different configurations and in different environments. e.g. cli w/ cli args, ide w/ file, cloud environments w/ environment variables, etc.\n\n* **Improved portability** - you can easily override single configuration values for deployment to any environment. [12 Factor App](https://12factor.net/) recommends setting configuration values with environment variables. This is no problem with the setup I recommend.\n\n* **Flexibility** - you can provide different levels of configuration customization for different users for different use cases, e.g. you can provide default configuration for most users but let power users override these values with environment variables or command line arguments.\n\n\nFigment has some suggestions for how to use it with Clap, but their example did not fit my use case, and I had trouble finding examples of how to implement this properly. That is why I decided to write this blog post!\n\n\n## How?\n\nThere are a few Rust crates that support hierarchical configurations. I chose [Figment](https://crates.io/crates/figment) because it was the only layered config crate that could handle values directly from the Serialize type. This was necessary to support command line arguments. We also need [Clap](https://crates.io/crates/clap) for command line argument parsing and [Serde](https://crates.io/crates/serde) for serialization of these command line arguments so that the argument values will be deserialized into the correct Rust types.\n\nFigment actually has a nice little section in the [documentation](https://docs.rs/figment/0.10.8/figment/#for-cli-application-authors) that explains how to use Figment with Clap, but there are a few differences with how they set up their configurations. They chose to load the configurations in a different order than is recommended for hierarchical configurations.\n\n```rust\nuse clap::Parser;\nuse figment::{Figment, providers::{Serialized, Toml, Env, Format}};\nuse serde::{Serialize, Deserialize};\n\n#[derive(Parser, Debug)]\nstruct Config {\n   /// Name of the person to greet.\n   #[clap(short, long, value_parser)]\n   name: String,\n\n   /// Number of times to greet\n   #[clap(short, long, value_parser, default_value_t = 1)]\n   count: u8,\n}\n\n// Parse CLI arguments. Override CLI config values with those in\n// `Config.toml` and `APP_`-prefixed environment variables.\nlet config: Config = Figment::new()\n    .merge(Serialized::defaults(Config::parse()))\n    .merge(Toml::file(\"Config.toml\"))\n    .merge(Env::prefixed(\"APP_\"))\n    .extract()?;\n```\n\nTheir ordering is `cli args < file < environment variables`, but we want `file < environment variables < cli args`. We could simply reorder the `merge` calls. Let's try that.\n\n```rust\n// Parse CLI arguments. Override CLI config values with those in\n// `Config.toml` and `APP_`-prefixed environment variables.\nlet config: Config = Figment::new()\n    .merge(Toml::file(\"Config.toml\"))\n    .merge(Env::prefixed(\"APP_\"))\n    .merge(Serialized::defaults(Config::parse()))\n    .extract()?;\n```\n\nHowever, this causes an issue. This will force you to use command line arguments, because if you don't, the values would be `None`, but your `Config` struct's values are not `Option<T>`, so they can't be `None`. Your code will panic! Okay, so what if we refactored `Config` to use `Option<T>`s?\n\n```rust\n#[derive(Parser, Debug)]\nstruct Config {\n    /// Name of the person to greet.\n    #[clap(short, long, value_parser)]\n    name: Option<String>,\n\n    /// Number of times to greet\n    #[clap(short, long, value_parser, default_value_t = 1)]\n    count: Option<u8>,\n}\n```\n\nWe now run into another issue. If we called the program without command line arguments specified, the `Config`'s values would be `None`. This would override the previous configuration values set by the file or environment variables with `None`! This means we are still basically forced to use command line arguments.\n\n## Final Solution\n\nThe final solution required adding a separate struct to handle the command line arguments, along with a helper from `Serde` that skips serialization of values if they are `None`.\n\n```rust\n// cli.rs\nuse clap::Parser;\nuse serde::Serialize;\n\n#[derive(Debug, Parser, Serialize)]\npub(crate) struct Cli {\n    /// The name\n    #[arg(long = \"name\")]\n    #[serde(skip_serializing_if = \"::std::option::Option::is_none\")]\n    pub(crate) name: Option<String>,\n\n    /// The count\n    #[arg(long = \"count\")]\n    #[serde(skip_serializing_if = \"::std::option::Option::is_none\")]\n    pub(crate) count: Option<u8>,\n}\n```\n\nNotice the `#[serde(skip_serializing_if = \"::std::option::Option::is_none\")]`! This means the value will not be included in the serialized struct if it was not set on the command line.\n\n```rust\n// config.rs\nuse serde::{Deserialize, Serialize};\n\n/// The global configuration for the driver and its components.\n#[derive(Serialize, Deserialize)]\npub(crate) struct Config {\n    /// The name\n    pub(crate) name: String,\n\n    /// The count\n    pub(crate) count: u8,\n}\n\n```\n\n```rust\nuse clap::Parser;\nuse color_eyre::eyre::Result;\nuse figment::{\n    Figment,\n    providers::{Env, Format, Serialized, Toml},\n};\n\n// main.rs\nuse crate::cli::Cli;\nuse crate::config::Config;\n\npub(crate) mod cli;\npub(crate) mod config;\n\npub async fn run() -> Result<()> {\n    // hierarchical config. cli args override envars which override toml config values\n    let conf: Config = Figment::new()\n        .merge(Toml::file(\"Config.toml\"))\n        .merge(Env::prefixed(\"APP_\"))\n        .merge(Serialized::defaults(Cli::parse()))\n        .extract()?;\n```\n\nNow we can elegantly set configuration values with Toml files, environment variables, and command line arguments in a sane way!\n\nYou can see a full example in action in this repo I am currently working on at my new company, [Astria](https://astria.org/).\n\nhttps://github.com/astriaorg/astria-conductor\n\nFeel free to follow me on [Github](https://github.com/steezeburger) or shoot me an e-mail! My e-mail address can be found on my Github profile.\n","slug":"rust-hierarchical-configuration","published":1,"updated":"2024-02-03T22:00:11.060Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cls728f2o0006ugol4q237zu5","content":"<h2 id=\"Why\"><a href=\"#Why\" class=\"headerlink\" title=\"Why?\"></a>Why?</h2><p>I’ve been working with Rust lately and I recently needed to implement a program where the configuration could be set through a file, environment variables, and cli args, with the latter overriding the former.</p>\n<p>This is called a hierarchical configuration, and it is the recommended way of handling configuration in your applications.</p>\n<p>There are several benefits to using hierarchical configuration. A few of them are:</p>\n<ul>\n<li><p><strong>Easier testing</strong> - you can easily test your app with different configurations and in different environments. e.g. cli w/ cli args, ide w/ file, cloud environments w/ environment variables, etc.</p>\n</li>\n<li><p><strong>Improved portability</strong> - you can easily override single configuration values for deployment to any environment. <a href=\"https://12factor.net/\">12 Factor App</a> recommends setting configuration values with environment variables. This is no problem with the setup I recommend.</p>\n</li>\n<li><p><strong>Flexibility</strong> - you can provide different levels of configuration customization for different users for different use cases, e.g. you can provide default configuration for most users but let power users override these values with environment variables or command line arguments.</p>\n</li>\n</ul>\n<p>Figment has some suggestions for how to use it with Clap, but their example did not fit my use case, and I had trouble finding examples of how to implement this properly. That is why I decided to write this blog post!</p>\n<h2 id=\"How\"><a href=\"#How\" class=\"headerlink\" title=\"How?\"></a>How?</h2><p>There are a few Rust crates that support hierarchical configurations. I chose <a href=\"https://crates.io/crates/figment\">Figment</a> because it was the only layered config crate that could handle values directly from the Serialize type. This was necessary to support command line arguments. We also need <a href=\"https://crates.io/crates/clap\">Clap</a> for command line argument parsing and <a href=\"https://crates.io/crates/serde\">Serde</a> for serialization of these command line arguments so that the argument values will be deserialized into the correct Rust types.</p>\n<p>Figment actually has a nice little section in the <a href=\"https://docs.rs/figment/0.10.8/figment/#for-cli-application-authors\">documentation</a> that explains how to use Figment with Clap, but there are a few differences with how they set up their configurations. They chose to load the configurations in a different order than is recommended for hierarchical configurations.</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> clap::Parser;</span><br><span class=\"line\"><span class=\"keyword\">use</span> figment::&#123;Figment, providers::&#123;Serialized, Toml, Env, Format&#125;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">use</span> serde::&#123;Serialize, Deserialize&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#[derive(Parser, Debug)]</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Config</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">/// Name of the person to greet.</span></span><br><span class=\"line\">   <span class=\"meta\">#[clap(short, long, value_parser)]</span></span><br><span class=\"line\">   name: <span class=\"type\">String</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/// Number of times to greet</span></span><br><span class=\"line\">   <span class=\"meta\">#[clap(short, long, value_parser, default_value_t = 1)]</span></span><br><span class=\"line\">   count: <span class=\"type\">u8</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Parse CLI arguments. Override CLI config values with those in</span></span><br><span class=\"line\"><span class=\"comment\">// `Config.toml` and `APP_`-prefixed environment variables.</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">config</span>: Config = Figment::<span class=\"title function_ invoke__\">new</span>()</span><br><span class=\"line\">    .<span class=\"title function_ invoke__\">merge</span>(Serialized::<span class=\"title function_ invoke__\">defaults</span>(Config::<span class=\"title function_ invoke__\">parse</span>()))</span><br><span class=\"line\">    .<span class=\"title function_ invoke__\">merge</span>(Toml::<span class=\"title function_ invoke__\">file</span>(<span class=\"string\">&quot;Config.toml&quot;</span>))</span><br><span class=\"line\">    .<span class=\"title function_ invoke__\">merge</span>(Env::<span class=\"title function_ invoke__\">prefixed</span>(<span class=\"string\">&quot;APP_&quot;</span>))</span><br><span class=\"line\">    .<span class=\"title function_ invoke__\">extract</span>()?;</span><br></pre></td></tr></table></figure>\n\n<p>Their ordering is <code>cli args &lt; file &lt; environment variables</code>, but we want <code>file &lt; environment variables &lt; cli args</code>. We could simply reorder the <code>merge</code> calls. Let’s try that.</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Parse CLI arguments. Override CLI config values with those in</span></span><br><span class=\"line\"><span class=\"comment\">// `Config.toml` and `APP_`-prefixed environment variables.</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">config</span>: Config = Figment::<span class=\"title function_ invoke__\">new</span>()</span><br><span class=\"line\">    .<span class=\"title function_ invoke__\">merge</span>(Toml::<span class=\"title function_ invoke__\">file</span>(<span class=\"string\">&quot;Config.toml&quot;</span>))</span><br><span class=\"line\">    .<span class=\"title function_ invoke__\">merge</span>(Env::<span class=\"title function_ invoke__\">prefixed</span>(<span class=\"string\">&quot;APP_&quot;</span>))</span><br><span class=\"line\">    .<span class=\"title function_ invoke__\">merge</span>(Serialized::<span class=\"title function_ invoke__\">defaults</span>(Config::<span class=\"title function_ invoke__\">parse</span>()))</span><br><span class=\"line\">    .<span class=\"title function_ invoke__\">extract</span>()?;</span><br></pre></td></tr></table></figure>\n\n<p>However, this causes an issue. This will force you to use command line arguments, because if you don’t, the values would be <code>None</code>, but your <code>Config</code> struct’s values are not <code>Option&lt;T&gt;</code>, so they can’t be <code>None</code>. Your code will panic! Okay, so what if we refactored <code>Config</code> to use <code>Option&lt;T&gt;</code>s?</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#[derive(Parser, Debug)]</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Config</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/// Name of the person to greet.</span></span><br><span class=\"line\">    <span class=\"meta\">#[clap(short, long, value_parser)]</span></span><br><span class=\"line\">    name: <span class=\"type\">Option</span>&lt;<span class=\"type\">String</span>&gt;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// Number of times to greet</span></span><br><span class=\"line\">    <span class=\"meta\">#[clap(short, long, value_parser, default_value_t = 1)]</span></span><br><span class=\"line\">    count: <span class=\"type\">Option</span>&lt;<span class=\"type\">u8</span>&gt;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>We now run into another issue. If we called the program without command line arguments specified, the <code>Config</code>‘s values would be <code>None</code>. This would override the previous configuration values set by the file or environment variables with <code>None</code>! This means we are still basically forced to use command line arguments.</p>\n<h2 id=\"Final-Solution\"><a href=\"#Final-Solution\" class=\"headerlink\" title=\"Final Solution\"></a>Final Solution</h2><p>The final solution required adding a separate struct to handle the command line arguments, along with a helper from <code>Serde</code> that skips serialization of values if they are <code>None</code>.</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// cli.rs</span></span><br><span class=\"line\"><span class=\"keyword\">use</span> clap::Parser;</span><br><span class=\"line\"><span class=\"keyword\">use</span> serde::Serialize;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#[derive(Debug, Parser, Serialize)]</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">pub</span>(<span class=\"keyword\">crate</span>) <span class=\"keyword\">struct</span> <span class=\"title class_\">Cli</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/// The name</span></span><br><span class=\"line\">    <span class=\"meta\">#[arg(long = <span class=\"string\">&quot;name&quot;</span>)]</span></span><br><span class=\"line\">    <span class=\"meta\">#[serde(skip_serializing_if = <span class=\"string\">&quot;::std::option::Option::is_none&quot;</span>)]</span></span><br><span class=\"line\">    <span class=\"title function_ invoke__\">pub</span>(<span class=\"keyword\">crate</span>) name: <span class=\"type\">Option</span>&lt;<span class=\"type\">String</span>&gt;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// The count</span></span><br><span class=\"line\">    <span class=\"meta\">#[arg(long = <span class=\"string\">&quot;count&quot;</span>)]</span></span><br><span class=\"line\">    <span class=\"meta\">#[serde(skip_serializing_if = <span class=\"string\">&quot;::std::option::Option::is_none&quot;</span>)]</span></span><br><span class=\"line\">    <span class=\"title function_ invoke__\">pub</span>(<span class=\"keyword\">crate</span>) count: <span class=\"type\">Option</span>&lt;<span class=\"type\">u8</span>&gt;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Notice the <code>#[serde(skip_serializing_if = &quot;::std::option::Option::is_none&quot;)]</code>! This means the value will not be included in the serialized struct if it was not set on the command line.</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// config.rs</span></span><br><span class=\"line\"><span class=\"keyword\">use</span> serde::&#123;Deserialize, Serialize&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/// The global configuration for the driver and its components.</span></span><br><span class=\"line\"><span class=\"meta\">#[derive(Serialize, Deserialize)]</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">pub</span>(<span class=\"keyword\">crate</span>) <span class=\"keyword\">struct</span> <span class=\"title class_\">Config</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/// The name</span></span><br><span class=\"line\">    <span class=\"title function_ invoke__\">pub</span>(<span class=\"keyword\">crate</span>) name: <span class=\"type\">String</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// The count</span></span><br><span class=\"line\">    <span class=\"title function_ invoke__\">pub</span>(<span class=\"keyword\">crate</span>) count: <span class=\"type\">u8</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> clap::Parser;</span><br><span class=\"line\"><span class=\"keyword\">use</span> color_eyre::eyre::<span class=\"type\">Result</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> figment::&#123;</span><br><span class=\"line\">    Figment,</span><br><span class=\"line\">    providers::&#123;Env, Format, Serialized, Toml&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// main.rs</span></span><br><span class=\"line\"><span class=\"keyword\">use</span> crate::cli::Cli;</span><br><span class=\"line\"><span class=\"keyword\">use</span> crate::config::Config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_ invoke__\">pub</span>(<span class=\"keyword\">crate</span>) <span class=\"keyword\">mod</span> cli;</span><br><span class=\"line\"><span class=\"title function_ invoke__\">pub</span>(<span class=\"keyword\">crate</span>) <span class=\"keyword\">mod</span> config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">async</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">run</span>() <span class=\"punctuation\">-&gt;</span> <span class=\"type\">Result</span>&lt;()&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// hierarchical config. cli args override envars which override toml config values</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">conf</span>: Config = Figment::<span class=\"title function_ invoke__\">new</span>()</span><br><span class=\"line\">        .<span class=\"title function_ invoke__\">merge</span>(Toml::<span class=\"title function_ invoke__\">file</span>(<span class=\"string\">&quot;Config.toml&quot;</span>))</span><br><span class=\"line\">        .<span class=\"title function_ invoke__\">merge</span>(Env::<span class=\"title function_ invoke__\">prefixed</span>(<span class=\"string\">&quot;APP_&quot;</span>))</span><br><span class=\"line\">        .<span class=\"title function_ invoke__\">merge</span>(Serialized::<span class=\"title function_ invoke__\">defaults</span>(Cli::<span class=\"title function_ invoke__\">parse</span>()))</span><br><span class=\"line\">        .<span class=\"title function_ invoke__\">extract</span>()?;</span><br></pre></td></tr></table></figure>\n\n<p>Now we can elegantly set configuration values with Toml files, environment variables, and command line arguments in a sane way!</p>\n<p>You can see a full example in action in this repo I am currently working on at my new company, <a href=\"https://astria.org/\">Astria</a>.</p>\n<p><a href=\"https://github.com/astriaorg/astria-conductor\">https://github.com/astriaorg/astria-conductor</a></p>\n<p>Feel free to follow me on <a href=\"https://github.com/steezeburger\">Github</a> or shoot me an e-mail! My e-mail address can be found on my Github profile.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Why\"><a href=\"#Why\" class=\"headerlink\" title=\"Why?\"></a>Why?</h2><p>I’ve been working with Rust lately and I recently needed to implement a program where the configuration could be set through a file, environment variables, and cli args, with the latter overriding the former.</p>\n<p>This is called a hierarchical configuration, and it is the recommended way of handling configuration in your applications.</p>\n<p>There are several benefits to using hierarchical configuration. A few of them are:</p>\n<ul>\n<li><p><strong>Easier testing</strong> - you can easily test your app with different configurations and in different environments. e.g. cli w/ cli args, ide w/ file, cloud environments w/ environment variables, etc.</p>\n</li>\n<li><p><strong>Improved portability</strong> - you can easily override single configuration values for deployment to any environment. <a href=\"https://12factor.net/\">12 Factor App</a> recommends setting configuration values with environment variables. This is no problem with the setup I recommend.</p>\n</li>\n<li><p><strong>Flexibility</strong> - you can provide different levels of configuration customization for different users for different use cases, e.g. you can provide default configuration for most users but let power users override these values with environment variables or command line arguments.</p>\n</li>\n</ul>\n<p>Figment has some suggestions for how to use it with Clap, but their example did not fit my use case, and I had trouble finding examples of how to implement this properly. That is why I decided to write this blog post!</p>\n<h2 id=\"How\"><a href=\"#How\" class=\"headerlink\" title=\"How?\"></a>How?</h2><p>There are a few Rust crates that support hierarchical configurations. I chose <a href=\"https://crates.io/crates/figment\">Figment</a> because it was the only layered config crate that could handle values directly from the Serialize type. This was necessary to support command line arguments. We also need <a href=\"https://crates.io/crates/clap\">Clap</a> for command line argument parsing and <a href=\"https://crates.io/crates/serde\">Serde</a> for serialization of these command line arguments so that the argument values will be deserialized into the correct Rust types.</p>\n<p>Figment actually has a nice little section in the <a href=\"https://docs.rs/figment/0.10.8/figment/#for-cli-application-authors\">documentation</a> that explains how to use Figment with Clap, but there are a few differences with how they set up their configurations. They chose to load the configurations in a different order than is recommended for hierarchical configurations.</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> clap::Parser;</span><br><span class=\"line\"><span class=\"keyword\">use</span> figment::&#123;Figment, providers::&#123;Serialized, Toml, Env, Format&#125;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">use</span> serde::&#123;Serialize, Deserialize&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#[derive(Parser, Debug)]</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Config</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">/// Name of the person to greet.</span></span><br><span class=\"line\">   <span class=\"meta\">#[clap(short, long, value_parser)]</span></span><br><span class=\"line\">   name: <span class=\"type\">String</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/// Number of times to greet</span></span><br><span class=\"line\">   <span class=\"meta\">#[clap(short, long, value_parser, default_value_t = 1)]</span></span><br><span class=\"line\">   count: <span class=\"type\">u8</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Parse CLI arguments. Override CLI config values with those in</span></span><br><span class=\"line\"><span class=\"comment\">// `Config.toml` and `APP_`-prefixed environment variables.</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">config</span>: Config = Figment::<span class=\"title function_ invoke__\">new</span>()</span><br><span class=\"line\">    .<span class=\"title function_ invoke__\">merge</span>(Serialized::<span class=\"title function_ invoke__\">defaults</span>(Config::<span class=\"title function_ invoke__\">parse</span>()))</span><br><span class=\"line\">    .<span class=\"title function_ invoke__\">merge</span>(Toml::<span class=\"title function_ invoke__\">file</span>(<span class=\"string\">&quot;Config.toml&quot;</span>))</span><br><span class=\"line\">    .<span class=\"title function_ invoke__\">merge</span>(Env::<span class=\"title function_ invoke__\">prefixed</span>(<span class=\"string\">&quot;APP_&quot;</span>))</span><br><span class=\"line\">    .<span class=\"title function_ invoke__\">extract</span>()?;</span><br></pre></td></tr></table></figure>\n\n<p>Their ordering is <code>cli args &lt; file &lt; environment variables</code>, but we want <code>file &lt; environment variables &lt; cli args</code>. We could simply reorder the <code>merge</code> calls. Let’s try that.</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Parse CLI arguments. Override CLI config values with those in</span></span><br><span class=\"line\"><span class=\"comment\">// `Config.toml` and `APP_`-prefixed environment variables.</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">config</span>: Config = Figment::<span class=\"title function_ invoke__\">new</span>()</span><br><span class=\"line\">    .<span class=\"title function_ invoke__\">merge</span>(Toml::<span class=\"title function_ invoke__\">file</span>(<span class=\"string\">&quot;Config.toml&quot;</span>))</span><br><span class=\"line\">    .<span class=\"title function_ invoke__\">merge</span>(Env::<span class=\"title function_ invoke__\">prefixed</span>(<span class=\"string\">&quot;APP_&quot;</span>))</span><br><span class=\"line\">    .<span class=\"title function_ invoke__\">merge</span>(Serialized::<span class=\"title function_ invoke__\">defaults</span>(Config::<span class=\"title function_ invoke__\">parse</span>()))</span><br><span class=\"line\">    .<span class=\"title function_ invoke__\">extract</span>()?;</span><br></pre></td></tr></table></figure>\n\n<p>However, this causes an issue. This will force you to use command line arguments, because if you don’t, the values would be <code>None</code>, but your <code>Config</code> struct’s values are not <code>Option&lt;T&gt;</code>, so they can’t be <code>None</code>. Your code will panic! Okay, so what if we refactored <code>Config</code> to use <code>Option&lt;T&gt;</code>s?</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#[derive(Parser, Debug)]</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Config</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/// Name of the person to greet.</span></span><br><span class=\"line\">    <span class=\"meta\">#[clap(short, long, value_parser)]</span></span><br><span class=\"line\">    name: <span class=\"type\">Option</span>&lt;<span class=\"type\">String</span>&gt;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// Number of times to greet</span></span><br><span class=\"line\">    <span class=\"meta\">#[clap(short, long, value_parser, default_value_t = 1)]</span></span><br><span class=\"line\">    count: <span class=\"type\">Option</span>&lt;<span class=\"type\">u8</span>&gt;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>We now run into another issue. If we called the program without command line arguments specified, the <code>Config</code>‘s values would be <code>None</code>. This would override the previous configuration values set by the file or environment variables with <code>None</code>! This means we are still basically forced to use command line arguments.</p>\n<h2 id=\"Final-Solution\"><a href=\"#Final-Solution\" class=\"headerlink\" title=\"Final Solution\"></a>Final Solution</h2><p>The final solution required adding a separate struct to handle the command line arguments, along with a helper from <code>Serde</code> that skips serialization of values if they are <code>None</code>.</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// cli.rs</span></span><br><span class=\"line\"><span class=\"keyword\">use</span> clap::Parser;</span><br><span class=\"line\"><span class=\"keyword\">use</span> serde::Serialize;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#[derive(Debug, Parser, Serialize)]</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">pub</span>(<span class=\"keyword\">crate</span>) <span class=\"keyword\">struct</span> <span class=\"title class_\">Cli</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/// The name</span></span><br><span class=\"line\">    <span class=\"meta\">#[arg(long = <span class=\"string\">&quot;name&quot;</span>)]</span></span><br><span class=\"line\">    <span class=\"meta\">#[serde(skip_serializing_if = <span class=\"string\">&quot;::std::option::Option::is_none&quot;</span>)]</span></span><br><span class=\"line\">    <span class=\"title function_ invoke__\">pub</span>(<span class=\"keyword\">crate</span>) name: <span class=\"type\">Option</span>&lt;<span class=\"type\">String</span>&gt;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// The count</span></span><br><span class=\"line\">    <span class=\"meta\">#[arg(long = <span class=\"string\">&quot;count&quot;</span>)]</span></span><br><span class=\"line\">    <span class=\"meta\">#[serde(skip_serializing_if = <span class=\"string\">&quot;::std::option::Option::is_none&quot;</span>)]</span></span><br><span class=\"line\">    <span class=\"title function_ invoke__\">pub</span>(<span class=\"keyword\">crate</span>) count: <span class=\"type\">Option</span>&lt;<span class=\"type\">u8</span>&gt;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Notice the <code>#[serde(skip_serializing_if = &quot;::std::option::Option::is_none&quot;)]</code>! This means the value will not be included in the serialized struct if it was not set on the command line.</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// config.rs</span></span><br><span class=\"line\"><span class=\"keyword\">use</span> serde::&#123;Deserialize, Serialize&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/// The global configuration for the driver and its components.</span></span><br><span class=\"line\"><span class=\"meta\">#[derive(Serialize, Deserialize)]</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">pub</span>(<span class=\"keyword\">crate</span>) <span class=\"keyword\">struct</span> <span class=\"title class_\">Config</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/// The name</span></span><br><span class=\"line\">    <span class=\"title function_ invoke__\">pub</span>(<span class=\"keyword\">crate</span>) name: <span class=\"type\">String</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// The count</span></span><br><span class=\"line\">    <span class=\"title function_ invoke__\">pub</span>(<span class=\"keyword\">crate</span>) count: <span class=\"type\">u8</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> clap::Parser;</span><br><span class=\"line\"><span class=\"keyword\">use</span> color_eyre::eyre::<span class=\"type\">Result</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> figment::&#123;</span><br><span class=\"line\">    Figment,</span><br><span class=\"line\">    providers::&#123;Env, Format, Serialized, Toml&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// main.rs</span></span><br><span class=\"line\"><span class=\"keyword\">use</span> crate::cli::Cli;</span><br><span class=\"line\"><span class=\"keyword\">use</span> crate::config::Config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_ invoke__\">pub</span>(<span class=\"keyword\">crate</span>) <span class=\"keyword\">mod</span> cli;</span><br><span class=\"line\"><span class=\"title function_ invoke__\">pub</span>(<span class=\"keyword\">crate</span>) <span class=\"keyword\">mod</span> config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">async</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">run</span>() <span class=\"punctuation\">-&gt;</span> <span class=\"type\">Result</span>&lt;()&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// hierarchical config. cli args override envars which override toml config values</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">conf</span>: Config = Figment::<span class=\"title function_ invoke__\">new</span>()</span><br><span class=\"line\">        .<span class=\"title function_ invoke__\">merge</span>(Toml::<span class=\"title function_ invoke__\">file</span>(<span class=\"string\">&quot;Config.toml&quot;</span>))</span><br><span class=\"line\">        .<span class=\"title function_ invoke__\">merge</span>(Env::<span class=\"title function_ invoke__\">prefixed</span>(<span class=\"string\">&quot;APP_&quot;</span>))</span><br><span class=\"line\">        .<span class=\"title function_ invoke__\">merge</span>(Serialized::<span class=\"title function_ invoke__\">defaults</span>(Cli::<span class=\"title function_ invoke__\">parse</span>()))</span><br><span class=\"line\">        .<span class=\"title function_ invoke__\">extract</span>()?;</span><br></pre></td></tr></table></figure>\n\n<p>Now we can elegantly set configuration values with Toml files, environment variables, and command line arguments in a sane way!</p>\n<p>You can see a full example in action in this repo I am currently working on at my new company, <a href=\"https://astria.org/\">Astria</a>.</p>\n<p><a href=\"https://github.com/astriaorg/astria-conductor\">https://github.com/astriaorg/astria-conductor</a></p>\n<p>Feel free to follow me on <a href=\"https://github.com/steezeburger\">Github</a> or shoot me an e-mail! My e-mail address can be found on my Github profile.</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cls728f2m0003ugol0feh6ezq","tag_id":"cls728f2n0005ugol5i6078sb","_id":"cls728f2p000bugol63g1fjy1"},{"post_id":"cls728f2m0003ugol0feh6ezq","tag_id":"cls728f2p0007ugolbp2phwwn","_id":"cls728f2p000cugol2zi58v9n"},{"post_id":"cls728f2m0003ugol0feh6ezq","tag_id":"cls728f2p0008ugolcn9za8ii","_id":"cls728f2p000eugol6ea2ah77"},{"post_id":"cls728f2m0003ugol0feh6ezq","tag_id":"cls728f2p0009ugol05859c78","_id":"cls728f2p000fugol4a44hlgp"},{"post_id":"cls728f2n0004ugol6pr9a7wj","tag_id":"cls728f2p000augold6s02zrr","_id":"cls728f2q000iugolarc992li"},{"post_id":"cls728f2n0004ugol6pr9a7wj","tag_id":"cls728f2p000dugol91ekbgbt","_id":"cls728f2q000jugol4rua97q5"},{"post_id":"cls728f2n0004ugol6pr9a7wj","tag_id":"cls728f2p000gugola2vmfzf4","_id":"cls728f2q000lugoldcjs7b9f"},{"post_id":"cls728f2o0006ugol4q237zu5","tag_id":"cls728f2q000hugol5xdw2sx7","_id":"cls728f2q000pugol8o3e1b5c"},{"post_id":"cls728f2o0006ugol4q237zu5","tag_id":"cls728f2q000kugol08nlf2ks","_id":"cls728f2q000qugol617r6zac"},{"post_id":"cls728f2o0006ugol4q237zu5","tag_id":"cls728f2q000mugol0pcf1lzy","_id":"cls728f2q000rugol6wxlaywk"},{"post_id":"cls728f2o0006ugol4q237zu5","tag_id":"cls728f2q000nugol3sw92lcc","_id":"cls728f2q000sugol5rx1d3vb"},{"post_id":"cls728f2o0006ugol4q237zu5","tag_id":"cls728f2q000ougol50j5e7ta","_id":"cls728f2q000tugol2d0i5kex"}],"Tag":[{"name":"palworld","_id":"cls728f2n0005ugol5i6078sb"},{"name":"self-hosting","_id":"cls728f2p0007ugolbp2phwwn"},{"name":"docker","_id":"cls728f2p0008ugolcn9za8ii"},{"name":"rathole","_id":"cls728f2p0009ugol05859c78"},{"name":"blender","_id":"cls728f2p000augold6s02zrr"},{"name":"cad","_id":"cls728f2p000dugol91ekbgbt"},{"name":"learning","_id":"cls728f2p000gugola2vmfzf4"},{"name":"rust","_id":"cls728f2q000hugol5xdw2sx7"},{"name":"figment","_id":"cls728f2q000kugol08nlf2ks"},{"name":"clap","_id":"cls728f2q000mugol0pcf1lzy"},{"name":"configuration","_id":"cls728f2q000nugol3sw92lcc"},{"name":"cli","_id":"cls728f2q000ougol50j5e7ta"}]}}